ÅJ
_userAgent_useProxyForRequestHeaders_audioLoadConfiguration _androidOffloadSchedulingEnabled_active	_platform_platformValue_nativePlatform_idlePlatform_playbackEventSubscription_playerDataSubscription#_androidAudioAttributesSubscription_becomingNoisyEventSubscription_interruptionEventSubscription_id_proxy_audioSource_audioSources	_disposed_initialSeekValues_audioPipeline_playbackEvent_playbackEventSubject_durationFuture_durationSubject_processingStateSubject_playingSubject_volumeSubject_speedSubject_pitchSubject_skipSilenceEnabledSubject_bufferedPositionSubject_icyMetadataSubject_playerStateSubject_sequenceSubject_shuffleIndicesSubject_shuffleIndicesInv_currentIndexSubject_sequenceStateSubject_loopModeSubject_shuffleModeEnabledSubject_androidAudioSessionIdSubject_positionDiscontinuitySubject_seeking_positionSubject%_automaticallyWaitsToMinimizeStalling2_canUseNetworkResourcesForLiveStreamingWhilePaused_preferredPeakBitRate_allowsExternalPlayback_playInterrupted_platformLoading_androidAudioAttributes_webCrossOrigin
_webSinkId_androidApplyAudioAttributes_handleAudioSessionActivation_activationCount_removeOldAssetCacheDiraudioSourceplaybackEventplaybackEventStreamdurationdurationFuturedurationStreamprocessingStateprocessingStateStreamplayingplayingStreamvolumevolumeStreamspeedspeedStreampitchpitchStreamskipSilenceEnabledskipSilenceEnabledStreambufferedPositionbufferedPositionStreamicyMetadataicyMetadataStreamplayerStateplayerStateStreamsequencesequenceStreamshuffleIndicesshuffleIndicesStreamcurrentIndexcurrentIndexStreamsequenceStatesequenceStateStreamhasNexthasPreviouseffectiveIndices_effectiveIndicesInv	nextIndexpreviousIndex_getRelativeIndexloopModeloopModeStreamshuffleModeEnabledshuffleModeEnabledStreamandroidAudioSessionIdandroidAudioSessionIdStreampositionDiscontinuityStream$automaticallyWaitsToMinimizeStalling1canUseNetworkResourcesForLiveStreamingWhilePausedpreferredPeakBitRateallowsExternalPlaybackwebCrossOrigin	webSinkIdposition_getPositionForpositionStreamcreatePositionStreamsetUrlsetFilePathsetAssetsetAudioSourceload_broadcastSequence_updateShuffleIndices_registerAudioSource_loadsetClipplaypause_sendPlayRequeststop	setVolumesetSkipSilenceEnabledsetSpeedsetPitchsetLoopModesetShuffleModeEnabledshuffle'setAutomaticallyWaitsToMinimizeStalling4setCanUseNetworkResourcesForLiveStreamingWhilePausedsetPreferredPeakBitRatesetAllowsExternalPlaybackseek
seekToNextseekToPrevioussetAndroidAudioAttributes"_internalSetAndroidAudioAttributessetWebCrossOriginsetWebSinkIddispose_setPlatformActive_disposePlatformclearAssetCachecodemessagedetailstoString
updateTimeupdatePositioncopyWithhashCode==idleloading	bufferingready	completedtitleurl_fromMessagebitrategenrenamemetadataIntervalisPublicinfoheaderscurrentSourceeffectiveSequencedarwinLoadControlandroidLoadControlandroidLivePlaybackSpeedControl
_toMessagepreferredForwardBufferDurationminBufferDurationmaxBufferDurationbufferForPlaybackDuration&bufferForPlaybackAfterRebufferDurationtargetBufferBytes prioritizeTimeOverSizeThresholdsbackBufferDurationfallbackMinPlaybackSpeedfallbackMaxPlaybackSpeedminUpdateIntervalproportionalControlFactormaxLiveOffsetErrorForUnitSpeed#targetLiveOffsetIncrementOnRebuffer$minPossibleLiveOffsetSmoothingFactorandroidExtractorOptionsdarwinAssetOptionspreferPreciseDurationAndTimingflagMp3EnableIndexSeekingflagMp3DisableId3MetadataconstantBitrateSeekingEnabled#constantBitrateSeekingAlwaysEnabledmp3Flags_server_running_handlerMapportaddUriAudioSourceaddStreamAudioSource
_sourceUri_requestKeyensureRunningstartendendExheaderparse
fullLengthlength_playerurifileasset_setup_shuffle_disposetag_overrideUri_effectiveUri_mergedHeaders
_loadAsset_getCacheFileoptionschildrenuseLazyPreparation_shuffleOrderaddinsertaddAll	insertAllremoveAtremoveRangemoveclear[]childcount_urirequestrangeRequestsSupportedsourceLengthcontentLengthoffsetcontentTypestream	_response	cacheFile	_progress	_requests_downloadProgressSubject_downloading_initresolvedownloadProgressStream
clearCache_partialCacheFile	_mimeFile_readCachedMimeType_fetch
controller
_completerfuturecompletefailindices_randomoffoneall	anonymoususeCredentials_eventSubject	_position_index	_sequence setAndroidAudioAttributesRequest_broadcastPlaybackEvent_getDurationAtIndexplaybackEventMessageStreamsetSkipSilencesetShuffleModesetShuffleOrderconcatenatingInsertAllconcatenatingRemoveRangeconcatenatingMoveaudioEffectSetEnabled$androidLoudnessEnhancerSetTargetGainandroidEqualizerBandSetGainandroidEqualizerGetParametersindexandroidAudioEffectsdarwinAudioEffects_audioEffects_enabledSubject	_activateenabledenabledStream_type
setEnabled_targetGainSubject
targetGaintargetGainStreamsetTargetGainlowerFrequencyupperFrequencycenterFrequency_gainSubjectgain
gainStreamsetGain_restoreminDecibelsmaxDecibelsbands_parametersCompleter
parametersreasonpreviousEventeventautoAdvance@_uuid_pluginPlatformCache_pluginPlatformAudioPlayerPlayerExceptionPlayerInterruptedExceptionPlaybackEventProcessingStatePlayerStateIcyInfo
IcyHeadersIcyMetadataSequenceStateAudioLoadConfigurationDarwinLoadControlAndroidLoadControlAndroidLivePlaybackSpeedControlProgressiveAudioSourceOptionsDarwinAssetOptionsAndroidExtractorOptions_ProxyHttpServer_HttpRangeRequest_HttpRangeResponseAudioSourceIndexedAudioSourceUriAudioSourceProgressiveAudioSourceDashAudioSourceHlsAudioSourceSilenceAudioSourceConcatenatingAudioSourceClippingAudioSourceLoopingAudioSource_encodeDataUrlStreamAudioSourceStreamAudioResponseLockCachingAudioSource_InProgressCacheResponse_StreamingByteRangeRequest_ProxyHandler_proxyHandlerForSource_proxyHandlerForUri_getCacheDirShuffleOrderDefaultShuffleOrderLoopModeWebCrossOrigin_IdleAudioPlayer_InitialSeekValuesAudioPipelineAudioEffectAndroidAudioEffectDarwinAudioEffectAndroidLoudnessEnhancerAndroidEqualizerBandAndroidEqualizerParametersAndroidEqualizer
_isAndroid	_isDarwin_isUnitTestPositionDiscontinuityPositionDiscontinuityReason_getUrl_createHttpClientÇexperimentalUuidJustAudioPlatforminstancedisposeAllPlayersDisposeAllPlayersRequestStringboolFutureAudioPlayerPlatformStreamSubscriptionPlaybackEventMessagePlayerDataMessageAndroidAudioAttributesvoidAudioInterruptionEventMapBehaviorSubjectsyncDurationseededListintoffPublishSubjectdouble	userAgentuseProxyForRequestHeadershandleInterruptionshandleAudioSessionActivationandroidApplyAudioAttributesaudioLoadConfigurationv4audioPipelineandroidOffloadSchedulingEnabled_setupdarwinLoadControl$automaticallyWaitsToMinimizeStallingadd	addStreammapeventprocessingStatedistincthandleErrorObject
StackTracebufferedPositionicyMetadatapairwiselistenpairfirstlastcurrentIndexautoAdvanceonemillisecondsdurationsecondsonErrorandroidAudioSessionIdRxcombineLatest5maxminlengthcombineLatest2force
catchErrordynamicAudioSessionthenaudioSessionconfigurationStreamconfandroidAudioAttributeswhere
attributescastsessionbecomingNoisyEventStreaminterruptionEventStreambegintypeAudioInterruptionTypeduckusageAndroidAudioUsagegamepauseunknownkIsWeb	DirectoryjoingetTemporaryDirectorypath
existsSync
deleteSync	recursiveprinteStreamstreamnvaluezeroidlegenerateieffectiveIndicesisEmptyallreadyupdatePositionDateTimenow
difference
updateTimesteps	minPeriod	maxPeriodStreamController	broadcastTimerisClosedcancelcloseperiodicuriUriparseheaderstaginitialPositionpreloadfilepackageassetinitialIndex	ExceptionpositionindexinitialSeekValuessequenceshuffleIndicesremoveRangeaddAllfilled_idPlatformExceptioncodemessage_shuffleloadLoadRequestaudioSourceMessage
_toMessageresponse
firstWherestateloadingdetailsFormatExceptionstartendchild	completedcopyWith	Completer	setActiveplayCompleterfuturePauseRequestplayPlayRequestcompletecompleteError
stackTrace	setVolumeSetVolumeRequestvolumesetSkipSilenceSetSkipSilenceRequestenabledsetSpeedSetSpeedRequestspeedsetPitchSetPitchRequestpitchsetLoopModeSetLoopModeRequestloopModeLoopModeMessagevaluessetShuffleModeSetShuffleModeRequestshuffleModeShuffleModeMessagenonesetShuffleOrderSetShuffleOrderRequest'setAutomaticallyWaitsToMinimizeStalling.SetAutomaticallyWaitsToMinimizeStallingRequest4setCanUseNetworkResourcesForLiveStreamingWhilePaused;SetCanUseNetworkResourcesForLiveStreamingWhilePausedRequestsetPreferredPeakBitRateSetPreferredPeakBitRateRequestbitRatesetAllowsExternalPlayback SetAllowsExternalPlaybackRequestallowsExternalPlaybackseekSeekRequestsetAndroidAudioAttributes SetAndroidAudioAttributesRequestcontentTypeflagsvaluesetWebCrossOriginSetWebCrossOriginRequestcrossOriginWebCrossOriginMessagesetWebSinkIdSetWebSinkIdRequestsinkIds_disposeclearstopplayerDataMessageStreamplayingplaybackEventMessageStreamProcessingStateMessage_fromMessageaddErrorinitInitRequestidandroidAudioEffectsaudioEffecttoListdarwinAudioEffectssequenceStreamconfiguration_audioEffects	_activatedisposeDisposeRequestdisposePlayerDisposePlayerRequestlistdeleteoverridehashruntimeType	bufferingIcyInfoMessagetitleurlIcyHeadersMessagebitrategenrenamemetadataIntervalisPublichashCodeIcyMetadataMessageinfoAudioLoadConfigurationMessageandroidLoadControlandroidLivePlaybackSpeedControlDarwinLoadControlMessagepreferredForwardBufferDuration1canUseNetworkResourcesForLiveStreamingWhilePausedpreferredPeakBitRateAndroidLoadControlMessageminBufferDurationmaxBufferDurationbufferForPlaybackDuration&bufferForPlaybackAfterRebufferDurationtargetBufferBytes prioritizeTimeOverSizeThresholdsbackBufferDuration&AndroidLivePlaybackSpeedControlMessagefallbackMinPlaybackSpeedfallbackMaxPlaybackSpeedminUpdateIntervalproportionalControlFactormaxLiveOffsetErrorForUnitSpeed#targetLiveOffsetIncrementOnRebuffer$minPossibleLiveOffsetSmoothingFactor$ProgressiveAudioSourceOptionsMessageandroidExtractorOptionsdarwinAssetOptionsDarwinAssetOptionsMessagepreferPreciseDurationAndTimingAndroidExtractorOptionsMessageconstantBitrateSeekingEnabled#constantBitrateSeekingAlwaysEnabledmp3Flags
HttpServerport_player
_userAgentreplaceschemehostInternetAddressloopbackIPv4addresshttpquerybindrequestmethodonDonetoStringRegExp
firstMatchtoLowerCaseendsWithfragmentmustCallSuper_registerAudioSourceAudioSourceMessagekeyskeypathSegments_useProxyForRequestHeaders_proxyensureRunningaddUriAudioSource	extensionbase64encode
rootBundlebufferasUint8List
createSyncwriteAsBytesFilejoinAllProgressiveAudioSourceMessage_effectiveUri_mergedHeadersoptionsDashAudioSourceMessageHlsAudioSourceMessageSilenceAudioSourceMessageConcatenatingAudioSorceshuffleModeEnabledshuffleOrderinsertsourcecisishuffle_broadcastSequence	_platformconcatenatingInsertAllConcatenatingInsertAllRequestchildrenofindices	insertAllremoveAtconcatenatingRemoveRangeConcatenatingRemoveRangeRequest
startIndexendIndexconcatenatingMoveConcatenatingMoveRequestnewIndexexpandConcatenatingAudioSourceMessageuseLazyPreparationClippingAudioSourceMessageUriAudioSourceMessageLoopingAudioSourceMessagecountencoderaddStreamAudioSourceHttpClientResponse	cacheFileexistssha256convertutf8readAsString
statusCode	openWritecontentLengthHttpHeadersacceptRangesHeaderwriteAsStringdatacacheResponse
controllersublistremoveWhereelementflushremoveopenReadconcatEagerrangeRequestsSupportedsourceLengthoffsetasBroadcastStreamresumerangeHeaderheaderfailst
renameSyncreqrescancelOnError
lengthSyncerrorReplaySubjectisCompletedHttpRequestendEx
HttpStatusinternalServerErrorsetcontentTypeHeadercontentRangeHeader_playbackEventSubjectdoneforEach
hostHeader	redirects
isNotEmptylocation
replaceAllcontains	transformdecoderLineSplitterlinereplaceAllMappedmtrim	hasScheme
startsWithbufferOutputchunkHttpExceptionSocketconnectdetachSocketwriteHeaderswriteRandomrandomindexOfnextInttoSetLoadResponsePlayResponsePauseResponseSetVolumeResponseSetSpeedResponseSetPitchResponseSetSkipSilenceResponseSetLoopModeResponseSetShuffleModeResponseSetShuffleOrderResponseSetWebCrossOriginResponseSetWebSinkIdResponse/SetAutomaticallyWaitsToMinimizeStallingResponse<SetCanUseNetworkResourcesForLiveStreamingWhilePausedResponseSetPreferredPeakBitRateResponseSeekResponse!SetAndroidAudioAttributesResponseDisposeResponseConcatenatingInsertAllResponse ConcatenatingRemoveRangeResponseConcatenatingMoveResponseAudioEffectSetEnabledResponseAudioEffectSetEnabledRequest,AndroidLoudnessEnhancerSetTargetGainResponse+AndroidLoudnessEnhancerSetTargetGainRequest#AndroidEqualizerBandSetGainResponse"AndroidEqualizerBandSetGainRequest%AndroidEqualizerGetParametersResponse$AndroidEqualizerGetParametersRequest
parameters!AndroidEqualizerParametersMessageminDecibelsmaxDecibelsbands!SetAllowsExternalPlaybackResponseeffect_activeaudioEffectSetEnabledAudioEffectMessage$androidLoudnessEnhancerSetTargetGain
targetGainAndroidLoudnessEnhancerMessageplayerandroidEqualizerBandSetGain	bandIndexgainAndroidEqualizerBandMessage_lowerFrequencyupperFrequencycenterFrequencyband_restorebandMessageandroidEqualizerGetParametersAndroidEqualizerMessagePlatform	isAndroidisIOSisMacOSenvironmentValueStreamThasValueHttpClientRequest
HttpClientgetUrlcontentLengthHeaderuserAgentHeadermaxRedirects		ExceptionAudioSourceIndexedAudioSourceUriAudioSourceStreamAudioSourceShuffleOrderAudioPlayerPlatformAudioEffectAndroidAudioEffectÄñ®Ôy¿ìDT±°3 ^ﬂ       
dart:async     dart:convert  -   dart:io  ?   	dart:math  T   (package:audio_session/audio_session.dart  Äá   package:crypto/crypto.dart  Ä¨   package:flutter/foundation.dart  Ä÷   package:flutter/services.dart  Ä˛   Hpackage:just_audio_platform_interface/just_audio_platform_interface.dartÅpÅÅexperimental ÅQ   package:meta/meta.dart  ÅÑ   Å£Å¶pÅ¶package:path/path.dart  Å™   (package:path_provider/path_provider.dart  Å›   package:rxdart/rxdart.dart  Ç   package:uuid/uuid.dart¿ ¿FGèÚ ,>RSÄÜÄ´Ä’Ä˝ÅPÅÉÅ©Å‹ÇÇ"Ç#Ç9Ç:ÇcÇdÇåÇøÉÉ$ÉJÉöÉÍÑ1Ñ;ÑÑëÑ’Ñ€ÖÖ
Ö#Ö%Ö&ÖsÖwÖÖ°Ö’ÖËÜÜVÜoÜ£Ü–Ü„Ü˝áá!á%áoá™áæáàààLàuàvàØà∞àﬂà‡â/âÄâ‘âÏâÌä1äRäÄäÅä¬äÈäÍã9ãbãíãìãﬂåå'å(ålåºçç6ç~çç»éédéíé‘é’èè.èkèπè∫èŒèÛêêEê_êâêØê∞ê‚ë.ëTëçë”ííBíwí¨íì0ìoì≠ìˆî6î\îûî·ï"ïfïßïœññ ñ9ñhñùñ‡óó,óMónó°óƒóﬁò	ò5ò6òròéòèòØòµôôNôúô›ô„ö0öÄöøõõ\õ™õ¯úEúíú€ùùùdù¥ùÚû?ûçûﬁü/üiü©üŸüﬂ†-†[†k†Ç†ß†‘°°6°X°ä°µ°œ°Ô¢¢O¢ï¢œ£
£V£ó£∏£ˆ§=§Å§á§∂§••3•|•∑•Á•˚¶D¶z¶•¶πßß5ßTßrßèß´ßı®)®v®∑®˙©	©U©f©ï©ƒ©Ú™™\™Ñ™∆™Ê´$´6´@´Å´ƒ´Ã´˚¨2¨^¨r¨ª¨˚≠0≠D≠ç≠ﬁÆÆ/ÆKÆeÆÖÆõÆÍØØFØbØ±ØœØ„Ø˚∞∞3∞G∞R∞[∞¨∞œ±±+±P±°±π≤≤1≤Y≤Ñ≤µ≤’≥≥O≥Å≥–¥¥?¥k¥É¥≥¥Ω¥√¥‚µµ9µsµÜµíµªµ¯∂∂7∂f∂å∂…∂˜∑ ∑2∑\∑s∑£∑’∑Ù∏∏_∏ñ∏¡∏”∏Í∏¯ππ-π\πÇπ≥π›πÙ∫$∫R∫|∫ì∫≈∫Ôªªª ª,ª6ª<ª[ª_ª`ª≠ªıºEºîº´º‹ºÙº˛Ω/Ω{Ω¶Ω¥ΩÏææ#æ`æjæræÑæ¿æ∆æ æÀæ˚ø+ø,øNøÉøÑø®ø˘ø˙¿ @8¿ @m¿ @n¿ @¨¿ @Ë¿ @È¿ A¿ AU¿ AV¿ A{¿ Aƒ¿ A≈¿ AÎ¿ B"¿ BH¿ BI¿ Bn¿ Bù¿ Bû¿ BÀ¿ C¿ C¿ C0¿ C_¿ C`¿ CÑ¿ C¿¿ C¡¿ CË¿ D¿ D¿ D>¿ Dx¿ Dy¿ Dß¿ D‘¿ D’¿ E¿ E>¿ E?¿ Ez¿ Eø¿ E¿¿ E¸¿ F+¿ FT¿ FU¿ Fë¿ F¥¿ FÏ¿ FÌ¿ G¿ GD¿ Gk¿ Gl¿ GΩ¿ G⁄¿ H¿ H¿ H[¿ Hß¿ H®¿ HÚ¿ I ¿ I!¿ Io¿ Ip¿ Ií¿ I›¿ Iﬁ¿ J)¿ J>¿ JÉ¿ JÑ¿ Jœ¿ K	¿ K(¿ K)¿ Kw¿ Kí¿ K‘¿ K’¿ L ¿ L/¿ L¿ LÄ¿ L∑¿ LÔ¿ L¿ MA¿ Mz¿ M≤¿ M≥¿ M·¿ N'¿ N(¿ Nn¿ Né¿ N“¿ N”¿ O¿ O@¿ Od¿ Oe¿ O¢¿ OÀ¿ OÃ¿ P
¿ P;¿ P<¿ Pà¿ Pÿ¿ PÓ¿ Q¿ QS¿ Qq¿ Qä¿ Qø¿ Q√¿ Qƒ¿ QÏ¿ R-¿ RK¿ Rh¿ Rù¿ R°¿ R¢¿ RÔ¿ R˚¿ S)¿ S*¿ Sw¿ Så¿ Sø¿ S¿¿ SÁ¿ T*¿ Ta¿ Tï¿ T‡¿ U¿ UY¿ Uê¿ Uµ¿ Uˆ¿ V¿ VJ¿ VY¿ Vn¿ Vv¿ V|¿ V¨¿ Vø¿ V√¿ Vƒ¿ V·¿ W¿ W¿ W6¿ Wx¿ Wy¿ W™¿ WÔ¿ W¿ X¿ XJ¿ Xs¿ Xt¿ X¥¿ X˛¿ Xˇ¿ YJ¿ Y|¿ Y®¿ Y©¿ Y„¿ Z&¿ ZR¿ ZS¿ Zú¿ ZŒ¿ [¿ [.¿ [/¿ [¿ [ê¿ [–¿ \
¿ \¿ \c¿ \ü¿ \†¿ \Ï¿ \˘¿ ]7¿ ]8¿ ]à¿ ]ü¿ ]ÿ¿ ]Ÿ¿ ^*¿ ^P¿ ^Q¿ ^{¿ ^∑¿ ^∏¿ ^Ú¿ _1¿ _e¿ _Æ¿ _ˇ¿ `¿ `7¿ `D¿ `o¿ `u¿ `y¿ `z¿ `ƒ¿ a¿ aZ¿ a®¿ aÙ¿ b*¿ b0¿ b~¿ b¶¿ b ¿ c ¿ c¿ cR¿ cj¿ c£¿ cﬂ¿ cÁ¿ cÌ¿ d¿ d¿ d¿ de¿ d±¿ d˘¿ eG¿ eó¿ e∞¿ e∂¿ f¿ fR¿ få¿ f∂¿ fÀ¿ g¿ gC¿ gJ¿ gn¿ gï¿ g‘¿ h¿ h¿ h=¿ hS¿ hv¿ hû¿ h∆¿ h÷¿ h‹¿ h›¿ hˆ¿ i/¿ iq¿ ió¿ i’¿ iÌ¿ j¿ jB¿ jf¿ jù¿ jª¿ j≈¿ j’¿ j›¿ jÚ¿ k¿ k¿ k"¿ k#¿ ka¿ k¿ kª¿ kÚ¿ l7¿ lW¿ lé¿ l∑¿ lª¿ lº¿ m¿ mV¿ mß¿ mÈ¿ mÔ¿ n¿ n¿ n¿ nn¿ n®¿ n≤¿ n∏¿ n˛¿ o¿ o,¿ oN¿ om¿ oÜ¿ oó¿ oü¿ oµ¿ o¸¿ p(¿ pE¿ pF¿ pè¿ pÀ¿ p—¿ pÓ¿ pÙ¿ p˛¿ qB¿ q|¿ qÜ¿ qå¿ q“¿ qÛ¿ r
¿ r)¿ rB¿ rS¿ r[¿ rñ¿ r’¿ r÷¿ s!¿ s]¿ sc¿ s§¿ s™¿ s¥¿ t¿ t@¿ tJ¿ tP¿ tõ¿ t÷¿ t‹¿ u"¿ u@¿ uX¿ um¿ uÜ¿ u•¿ u∂¿ uæ¿ u‘¿ v¿ v@¿ vZ¿ vc¿ vd¿ v´¿ v±¿ vˇ¿ wK¿ wú¿ wÈ¿ x9¿ xá¿ x“¿ xÿ¿ y$¿ yt¿ yã¿ yë¿ y»¿ yŒ¿ z¿ zU¿ z§¿ zÚ¿ {¿ {,¿ {F¿ {_¿ {v¿ {ï¿ {¢¿ {¬¿ {€¿ {Ù¿ |@¿ |~¿ |ß¿ |„¿ |˛¿ }¿ }0¿ }Q¿ }d¿ }É¿ }ê¿ }ﬁ¿ }‰¿ }˘¿ }˝¿ }˛¿ ~N¿ ~É¿ ~â¿ ~£¿ ~©¿ ~È¿ 0¿ ¿ Õ¿ Ë¿ Ä¿ Ä+¿ ÄK¿ Äâ¿ Äè¿ Ä¢¿ Ä÷¿ Ä˜¿ Å0¿ Åa¿ Ån¿ Å´¿ Åÿ¿ Åﬁ¿ Å‚¿ Å„¿ Ç¿ ÇL¿ Çu¿ Çß¿ Çƒ¿ Ç»¿ Ç…¿ ÇÍ¿ É(¿ Éf¿ É¢¿ É»¿ Ñ¿ ÑG¿ Ñh¿ Ñµ¿ Ñª¿ Ñ¿ Ö"¿ Ö(¿ Ö,¿ Ö-¿ Ö_¿ Öá¿ Öã¿ Öå¿ Öÿ¿ Ü¿ Ü>¿ Ü]¿ Üè¿ Ü◊¿ á'¿ á/¿ á5¿ á6¿ á@¿ áa¿ á|¿ á¿¿ á‹¿ á˝¿ à¿ àO¿ àâ¿ àΩ¿ à ¿ à¸¿ â*¿ âE¿ âk¿ âì¿ â€¿ ä+¿ ä3¿ ä\¿ ä~¿ ä¬¿ ä›¿ äÙ¿ ã¿ ã'¿ ãc¿ ã∞¿ ã◊¿ ã¯¿ å/¿ å@¿ åu¿ å¿ åá¿ åç¿ åë¿ åí¿ å◊¿ ç"¿ çq¿ çπ¿ ç›¿ ç˙¿ é7¿ éW¿ éú¿ éæ¿ é◊¿ é¸¿ è¿ è;¿ èr¿ èê¿ è™¿ èƒ¿ è÷¿ èÎ¿ èÔ¿ è¿ êA¿ êé¿ ê‹¿ ë-¿ ëz¿ ëó¿ ëù¿ ëË¿ í8¿ íÖ¿ í“¿ ì¿ ìi¿ ìà¿ ìé¿ ìŸ¿ î ¿ î>¿ îY¿ îr¿ îê¿ î€¿ ï*¿ ïE¿ ïs¿ ïì¿ ïµ¿ ïº¿ ï€¿ ñ
¿ ñ:¿ ñp¿ ñ¿¿ ñ‹¿ ó&¿ ói¿ óõ¿ ó∂¿ óÕ¿ ò¿ òk¿ òº¿ ô¿ ôA¿ ôR¿ ô†¿ ôÎ¿ ö,¿ öc¿ öm¿ öu¿ öÇ¿ öº¿ öﬁ¿ ö‰¿ õ¿ õ¿ õ	¿ õO¿ õa¿ õÄ¿ õõ¿ õµ¿ õ’¿ õÛ¿ ú;¿ úi¿ úâ¿ ú´¿ ú≤¿ ú“¿ ù¿ ùL¿ ùo¿ ù¢¿ ù¶¿ ùß¿ ù»¿ û¿ û¿ ûG¿ ûq¿ ûí¿ û∞¿ û„¿ ûÈ¿ ûÌ¿ ûÓ¿ ü8¿ üÖ¿ ü ¿ ü–¿ †¿ †k¿ †ª¿ °¿ °!¿ °<¿ °O¿ °ô¿ °ö¿ °∏¿ ¢ ¿ ¢ ¿ ¢2¿ ¢6¿ ¢7¿ ¢y¿ ¢Ø¿ ¢ ¿ ¢Í¿ £3¿ £7¿ £8¿ £É¿ £ò¿ £”¿ £Ó¿ § ¿ §N¿ §{¿ §Ö¿ §£¿ §Á¿ §˘¿ •2¿ •A¿ •G¿ •K¿ •L¿ •ò¿ •Ê¿ ¶3¿ ¶@¿ ¶t¿ ¶è¿ ¶Ω¿ ¶›¿ ¶ˇ¿ ß¿ ß5¿ ßS¿ ßò¿ ßú¿ ßù¿ ß”¿ ®¿ ®"¿ ®P¿ ®p¿ ®í¿ ®ô¿ ®»¿ ®Ê¿ ©+¿ ©/¿ ©0¿ ©Å¿ ©∫¿ ©Ï¿ ™¿ ™'¿ ™P¿ ™õ¿ ™ü¿ ™†¿ ™Ã¿ ´¿ ´"¿ ´O¿ ´ë¿ ´¶¿ ´¿ ´Ù¿ ´ı¿ ¨D¿ ¨å¿ ¨≠¿ ¨Œ¿ ¨È¿ ≠¿ ≠G¿ ≠d¿ ≠ë¿ ≠‚¿ ≠Ê¿ ≠Á¿ ÆL¿ Æs¿ Æ´¿ ÆÍ¿ Ø¿ Ø1¿ Ø_¿ Ø§¿ Ø‹¿ ∞¿ ∞¿ ∞¿ ∞i¿ ∞Ç¿ ∞«¿ ±¿ ±.¿ ±g¿ ±¢¿ ±æ¿ ±˝¿ ≤F¿ ≤î¿ ≤ò¿ ≤ô¿ ≤Ÿ¿ ≥¿ ≥2¿ ≥M¿ ≥¿ ≥¥¿ ≥¸¿ ¥ ¿ ¥¿ ¥D¿ ¥n¿ ¥ü¿ ¥∫¿ ¥¿ µ'¿ µQ¿ µè¿ µì¿ µî¿ µŸ¿ ∂)¿ ∂v¿ ∂ù¿ ∂£¿ ∂·¿ ∑%¿ ∑@¿ ∑_¿ ∑~¿ ∑¢¿ ∑≤¿ ∑¡¿ ∑œ¿ ∑Í¿ ∏¿ ∏U¿ ∏{¿ ∏£¿ ∏∞¿ ∏Â¿ π(¿ πX¿ πy¿ πô¿ πª¿ πˇ¿ ∫¿ ∫/¿ ∫9¿ ∫?¿ ∫C¿ ∫D¿ ∫ã¿ ∫Ø¿ ∫¬¿ ∫ı¿ ∫˚¿ ∫ˇ¿ ª ¿ ªO¿ ªw¿ ªé¿ ª≈¿ ªÀ¿ ªœ¿ ª–¿ º¿ ºo¿ ºô¿ ºœ¿ ºÍ¿ Ω¿ ΩW¿ ΩÜ¿ Ω÷¿ Ω⁄¿ Ω€¿ æ+¿ æa¿ æí¿ æ·¿ ø¿ øE¿ øs¿ øw¿ øx¿ øƒ¿ øÊ¿ ¿]¿ ¿c¿ ¿≤¿ ¿˝¿ ¡I¿ ¡ñ¿ ¡‰¿ ¡˜¿ ¬@¿ ¬[¿ ¬Ü¿ ¬á¿ ¬∂¿ ¬÷¿ √¿ √¿ √^¿ √e¿ √ã¿ √è¿ √ê¿ √ø¿ √ı¿ ƒ¿ ƒ;¿ ƒ<¿ ƒX¿ ƒó¿ ƒ≥¿ ƒ∑¿ ƒ∏¿ ≈¿ ≈0¿ ≈Q¿ ≈l¿ ≈Ç¿ ≈•¿ ≈€¿ ≈˘¿ ≈ˇ¿ ∆ ¿ ∆N¿ ∆j¿ ∆p¿ ∆â¿ ∆≥¿ ∆«¿ ∆Õ¿ ∆Ë¿ ∆˚¿ «¿ «C¿ «q¿ «î¿ «∂¿ «◊¿ «¯¿ »¿ »F¿ »¿ »¥¿ »Ë¿ »Ï¿ »Ì¿ …=¿ …å¿ …÷¿ …Á¿ …Ì¿  ;¿  I¿  ~¿  º¿  ‹¿ À¿ À:¿ À;¿ Ài¿ Àù¿ ÀÍ¿ Ã6¿ ÃÖ¿ Ã√¿ Ãﬁ¿ Ãﬂ¿ Õ,¿ Õv¿ Õß¿ Õÿ¿ ÕŸ¿ Œ¿ ŒJ¿ ŒK¿ ŒÅ¿ ŒÇ¿ Œ–¿ Œ˝¿ œK¿ œã¿ œí¿ œ„¿ –¿ –=¿ –W¿ –Ç¿ –Æ¿ –Œ¿ –˘¿ —	¿ —U¿ —¿ —é¿ —î¿ —ï¿ —‚¿ “¿ “¿ “;¿ “g¿ “ç¿ “é¿ “…¿ “È¿ ”'¿ ”l¿ ”ù¿ ”ß¿ ”Õ¿ ”¸¿ ‘¿ ‘+¿ ‘X¿ ‘b¿ ‘á¿ ‘¥¿ ‘æ¿ ‘Ê¿ ’0¿ ’:¿ ’e¿ ’ä¿ ’Œ¿ ’ÿ¿ ’‚¿ ÷¿ ÷F¿ ÷o¿ ÷©¿ ÷ˆ¿ ◊¿ ◊J¿ ◊]¿ ◊è¿ ◊õ¿ ◊•¿ ◊≈¿ ÿ¿ ÿ/¿ ÿ9¿ ÿf¿ ÿ∑¿ ÿ”¿ ÿˇ¿ Ÿ'¿ Ÿn¿ Ÿò¿ Ÿ ¿ ⁄ ¿ ⁄¿ ⁄Q¿ ⁄f¿ ⁄¶¿ ⁄≈¿ €¿ €¿ €P¿ €¿ €ë¿ €õ¿ €‹¿ ‹¿ ‹¿ ‹O¿ ‹í¿ ‹¿¿ ‹Ù¿ ›:¿ ›Ü¿ ›ê¿ ›√¿ ›…¿ › ¿ ﬁ ¿ ﬁ,¿ ﬁU¿ ﬁi¿ ﬁñ¿ ﬁ∆¿ ﬁı¿ ﬁˇ¿ ﬂ¿ ﬂ.¿ ﬂ¿ ﬂ∫¿ ﬂÿ¿ ‡¿ ‡6¿ ‡É¿ ‡∆¿ ‡˝¿ ·C¿ ·c¿ ·{¿ ·º¿ ·Ú¿ ‚8¿ ‚X¿ ‚p¿ ‚¡¿ ‚—¿ ‚Ó¿ „8¿ „h¿ „i¿ „ä¿ „ã¿ „ü¿ „¬¿ ‰¿ ‰6¿ ‰l¿ ‰z¿ ‰Ñ¿ ‰Ö¿ ‰∫¿ ‰Ò¿ Â¿ Âb¿ Â°¿ ÂŒ¿ Â¸¿ Ê:¿ Êp¿ Êò¿ Ê‹¿ ÊË¿ Á¿ ÁO¿ ÁÑ¿ Á∫¿ Á∆¿ Á–¿ Ë¿ Ë6¿ Ëx¿ Ë∂¿ Ë˘¿ È-¿ È7¿ È{¿ È≠¿ ÈÌ¿ Í¿ Í-¿ Ío¿ ÍÖ¿ Íª¿ Í≈¿ Í˜¿ Î¿ Î.¿ Îq¿ Îá¿ Î√¿ ÎÕ¿ Îˇ¿ Ï6¿ Ïv¿ Ï®¿ ÏÂ¿ Ì¿ Ì:¿ Ìg¿ Ìô¿ ÌØ¿ Ìÿ¿ Ó¿ Óp¿ ÓÄ¿ Óå¿ ÓÆ¿ ÓÎ¿ Ô¿ Ô¿ Ô)¿ Ô3¿ Ôs¿ Ô§¿ Ôÿ¿ Ô‚¿ Ô˘¿ .¿ 8¿ @¿ A¿ d¿ e¿ Ü¿ î¿ Œ¿ Ò¿ Ò>¿ Ò~¿ Ò≥¿ ÒÁ¿ Ú¿ Ú9¿ Úc¿ Úö¿ Ú‘¿ Úﬁ¿ ÚÌ¿ Û¿ Û¿ Û ¿ Û7¿ Û=¿ Û>¿ Û]¿ ÛÇ¿ ÛÜ¿ Ûá¿ Û¨¿ ÛÚ¿ Ù¿ ÙJ¿ ÙW¿ Ùu¿ ÙÅ¿ ÙÕ¿ Ù·¿ ı¿ ıQ¿ ıY¿ ı_¿ ıc¿ ıd¿ ı±¿ ˆ¿ ˆ¿ ˆ?¿ ˆW¿ ˆì¿ ˆΩ¿ ˆ√¿ ˆ«¿ ˆ…¿ ˆ ¿ ˜¿ ˜g¿ ˜Ñ¿ ˜±¿ ˜ı¿ ¯;¿ ¯M¿ ¯N¿ ¯ö¿ ¯Á¿ ¯˙¿ ˘¿ ˘¿ ˘e¿ ˘∂¿ ˘⁄¿ ˙ ¿ ˙¿ ˙M¿ ˙¿ ˙Ä¿ ˙å¿ ˙∑¿ ˙π¿ ˙∫¿ ˚	¿ ˚7¿ ˚o¿ ˚à¿ ˚â¿ ˚µ¿ ˚∂¿ ˚¬¿ ˚Â¿ ˚Á¿ ˚Ë¿ ¸0¿ ¸F¿ ¸j¿ ¸ì¿ ¸î¿ ¸‰¿ ¸˚¿ ˝¿ ˝¿ ˝=¿ ˝^¿ ˝_¿ ˝z¿ ˝ù¿ ˝û¿ ˝Œ¿ ˝Í¿ ˝Î¿ ˛9¿ ˛[¿ ˛\¿ ˛≠¿ ˛»¿ ˛…¿ ˛˚¿ ˇ¿ ˇ ¿ ˇ2¿ ˇc¿ ˇ}¿ ˇ¶¿ ˇ—¿ ˇ‰¿ ˇ˙¿ ¿ 1¿ c¿ d¿ ß¿ ¬¿ Ë¿¿ ¿@¿X¿v¿ç¿≠¿µ¿ ¿¿?¿~¿√¿¿&¿_¿~¿ø¿»¿…¿’¿¯¿¿%¿=¿W¿i¿~¿î¿≥¿º¿Ω¿…¿Ì¿¿7¿i¿ë¿¡¿ı¿¿C¿o¿´¿¨¿∏¿œ¿á¿â¿ä¿∆¿›¿¿¿¿F¿Q¿R¿ä¿ó¿ò¿€¿‰¿Â¿	¿	%¿	'¿	(¿	r¿	¿¿
¿
I¿
]¿
ö¿
π¿
œ¿
–¿¿+¿,¿_¿`¿l¿∏¿π¿≈¿¿¿¿3¿]¿{¿ù¿Õ¿œ¿–¿‡¿˜¿¿¿O¿m¿á¿ê¿ë¿∆¿«¿”¿¿¿¿?¿@¿L¿p¿ö¿¥¿“¿Í¿Ï¿Ì¿ ¿¿-¿C¿b¿w¿è¿ê¿€¿˝¿¿7¿k¿Ö¿©¿≤¿≥¿¬¿›¿ˆ¿¿2¿I¿e¿k¿l¿x¿è¿ ¿¿¿8¿9¿E¿i¿ì¿∞¿“¿¿¿@¿Z¿|¿~¿¿ì¿™¿«¿»¿¿g¿ê¿£¿‹¿Â¿Ê¿"¿#¿/¿a¿b¿n¿í¿º¿⁄¿ˆ¿¿¿¿^¿û¿Ï¿Û¿	¿:¿e¿f¿ù¿∑¿∏¿ÿ¿˙¿˚¿"¿C¿D¿a¿|¿}¿ƒ¿Û¿Ù¿¿I¿Å¿Ç¿≈¿¿W¿è¿°¿£¿§¿Á¿¿:¿h¿i¿ö¿ ¿À¿¸¿F¿G¿h¿Ñ¿°¿À¿—¿“¿!¿]¿õ¿ƒ¿ˇ¿¿
¿¿<¿V¿ü¿Ï¿¿ ¿m¿π¿‹¿ ¿ ¿ ]¿ ì¿ ”¿ ‘¿!¿!,¿!R¿!S¿!o¿!•¿!Œ¿"¿"1¿"7¿"8¿"}¿"´¿"›¿#%¿#`¿#ü¿#”¿#‹¿#ﬁ¿#ﬂ¿$¿$)¿$x¿$î¿$∏¿$π¿%¿%$¿%H¿%I¿%ï¿%π¿%Â¿%Ê¿&2¿&[¿&î¿&ï¿&∆¿&Ê¿&Á¿'6¿'I¿'x¿'y¿'£¿'»¿'…¿'Ê¿( ¿(Z¿(£¿(Ò¿)¿)@¿)m¿)s¿)t¿)ª¿)È¿*¿*U¿*Ö¿*π¿*Á¿+3¿+c¿+l¿+n¿+o¿+û¿+∆¿,¿,a¿,ä¿,ã¿,€¿-&¿-O¿-P¿-û¿-¨¿-–¿-—¿."¿.c¿.¥¿.ﬁ¿.ﬂ¿/.¿/k¿/ú¿/ù¿/Í¿0¿08¿09¿0É¿0•¿0⁄¿0€¿1¿1/¿1Y¿1í¿1º¿2¿27¿2b¿2ô¿2ü¿2†¿2Ÿ¿3¿3C¿3¿3≠¿3Î¿43¿4`¿4ë¿4ø¿4Ò¿4˙¿4¸¿4˝¿5#¿5]¿5ç¿5é¿5∂¿5ÿ¿5ı¿5˚¿5¸¿63¿6_¿6ß¿6Â¿6Ó¿6¿6Ò¿7¿79¿7:¿7Ö¿7Ü¿7Õ¿8¿8¿8 ¿8!¿8A¿8t¿8ß¿8®¿8‘¿9¿9¿9¿9?¿9n¿9§¿9ª¿9¡¿9¬¿:¿:Y¿:Ü¿:∑¿:”¿:‹¿:ﬁ¿:ﬂ¿;*¿;C¿;^¿;w¿;x¿;•¿;⁄¿;€¿<'¿<D¿<d¿<e¿<¥¿<„¿=¿=0¿=X¿=z¿=∏¿=æ¿=·¿>¿>¿>1¿>^¿>e¿>}¿>ì¿>≈¿>◊¿>ﬁ¿>‚¿>„¿?2¿?d¿?õ¿?ø¿?‚¿@¿@*¿@.¿@/¿@g¿@¥¿@µ¿@˛¿AD¿Aé¿AŒ¿B¿B¿BA¿Bk¿BÖ¿Bü¿B£¿B§¿BΩ¿Bﬂ¿BÙ¿C:¿C_¿CÑ¿C∂¿CÂ¿D¿D¿D!¿D9¿De¿D}¿DÖ¿Dâ¿Dä¿D°¿D¬¿D›¿DÛ¿E¿E¿E¿E¿EY¿Es¿E™¿EΩ¿Eæ¿F	¿F+¿F=¿F>¿F}¿F∞¿F±¿F‹¿F›¿G¿G"¿Gd¿Ge¿Gô¿G”¿H
¿HX¿H|¿H»¿I¿I¿I¿I¿IJ¿Ie¿Iî¿Iß¿I®¿I”¿I‰¿IÂ¿J¿J3¿J4¿Jq¿Jr¿Jõ¿J∏¿Jπ¿Jﬁ¿K¿K¿KZ¿Kß¿K©¿K™¿Kı¿LD¿LÉ¿L†¿L¥¿LÃ¿LÕ¿M¿Ma¿M±¿M÷¿M‹¿N,¿Nw¿N∆¿O¿O ¿O&¿Ow¿Oπ¿Oø¿P¿PW¿Pô¿Pü¿PÍ¿Q8¿QÖ¿Q≠¿Q“¿R¿R;¿Ru¿R±¿R’¿S¿S@¿S~¿Sã¿S—¿S◊¿S€¿S‹¿T¿T!¿T>¿TD¿TN¿TÉ¿Tç¿TÃ¿U¿U
¿U¿UL¿UR¿Uì¿Uô¿U£¿UÊ¿U¿Uˆ¿VA¿V|¿V¨¿V‘¿VË¿W.¿Wt¿Wx¿Wy¿Wù¿Wû¿WØ¿W·¿W˜¿X¿X"¿X#¿XT¿XU¿X{¿X|¿Xç¿X°¿X”¿XÁ¿XÎ¿XÏ¿Y¿Y¿Y9¿Y:¿YZ¿Y[¿Yg¿Yã¿Yå¿Yò¿Yº¿YÊ¿Z¿Z¿Z¿Z¿ZS¿Zã¿Z†¿Z∂¿Z∑¿ZË¿ZÈ¿Zı¿[¿[¿[*¿[]¿[^¿[j¿[ë¿[ì¿[î¿[·¿\¿\-¿\S¿\h¿\i¿\µ¿\‚¿\„¿]4¿]Ñ¿]ë¿]¡¿]¬¿]Ô¿^¿^,¿^:¿^]¿^°¿^‚¿^Ò¿^Ú¿^˛¿_0¿_P¿_q¿_¥¿_€¿_Ó¿`¿`U¿`Ä¿`º¿`¬¿`∆¿`«¿`˙¿a¿aX¿aï¿aØ¿aÃ¿aÍ¿b¿b&¿bC¿bb¿b¿bú¿bº¿b›¿b˛¿c!¿c*¿cK¿cb¿c≠¿c ¿c€¿d+¿d@¿dM¿dö¿d∑¿dÍ¿e9¿eu¿eï¿eø¿e‡¿f&¿f.¿fP¿fV¿fZ¿f[¿fò¿fÁ¿g¿g¿gL¿gW¿gY¿gZ¿gß¿g⁄¿gﬁ¿h,¿hC¿hÉ¿h≤¿h∂¿i¿i¿i#¿ir¿i≤¿iË¿j¿j¿j3¿jD¿jW¿jf¿jz¿jå¿jí¿jì¿jü¿j„¿jÙ¿k¿k<¿kN¿kv¿k¿kÅ¿kÇ¿k—¿k‡¿k‰¿l2¿lI¿lâ¿l∏¿lº¿m¿m\¿m§¿m®¿m˜¿n7¿nf¿nÅ¿n»¿o¿o¿o¿oV¿og¿oé¿oØ¿o¡¿o ¿oÃ¿oÕ¿p¿p+¿p/¿p}¿pî¿p‘¿q¿q¿qW¿qü¿q£¿qÚ¿r2¿r`¿rz¿r¡¿s¿s¿s¿sN¿s_¿sÜ¿sß¿sπ¿s¬¿sƒ¿s≈¿sÛ¿s˜¿t.¿td¿tp¿tú¿tù¿t©¿tÛ¿tÙ¿u¿u¿u<¿uh¿ui¿uu¿uö¿uÿ¿u⁄¿u€¿v*¿vv¿vƒ¿v‡¿v‰¿w1¿wQ¿wÜ¿w™¿wÀ¿wÔ¿w¿x<¿xã¿xŸ¿y¿yn¿yå¿y©¿y≈¿yÈ¿z	¿zF¿zn¿zo¿z{¿z≠¿zÕ¿z¿{¿{¿{¿{¿{*¿{Q¿{m¿{ç¿{¥¿{Ô¿|¿|B¿|Ñ¿|§¿|œ¿|¯¿}¿} ¿}@¿}Ñ¿}ª¿}‘¿}⁄¿~¿~¿~¿~F¿~z¿~ù¿~º¿~‡¿~˚¿ ¿J¿â¿≤¿…¿Â¿Ä¿ÄW¿Ä]¿Äa¿Äb¿Äò¿Ä⁄¿Å¿Å'¿ÅB¿Åg¿Åë¿Å–¿Å˘¿Ç¿Ç,¿Ç`¿Çû¿Ç§¿Ç®¿Ç©¿Ç€¿É¿É=¿Éa¿Éì¿ÉÆ¿É”¿É˜¿Ñ¿Ñ%¿Ñd¿Ñç¿Ñ§¿Ñ¿¿Ö¿ÖL¿ÖR¿ÖV¿ÖW¿Öì¿Ö€¿Ü	¿Ü;¿ÜV¿Ü{¿Üü¿Ü≈¿ÜÕ¿á¿á5¿áL¿áh¿á∂¿áÙ¿á˙¿á˛¿áˇ¿àJ¿àÑ¿àØ¿àÕ¿à˛¿â¿â>¿â¿â™¿â¡¿â‚¿ä¿äC¿äI¿äM¿äN¿äû¿ä∏¿äÔ¿ã¿ã@¿ã[¿ãÄ¿ã¡¿ãÏ¿å¿å$¿åA¿å¿åÖ¿åâ¿åä¿å’¿ç¿çQ¿çê¿ç∑¿ç“¿ç˜¿é1¿éU¿él¿éñ¿é∏¿éˆ¿é¸¿è ¿è¿è.¿èM¿èn¿èÑ¿èü¿è∫¿èﬂ¿ê ¿êK¿êb¿ê¿êú¿ê⁄¿ê‡¿ê‰¿êÂ¿ë	¿ë.¿ë/¿ëh¿ëi¿ëu¿ë†¿ë”¿ë‘¿ë‡¿í¿í¿íA¿íc¿í¥¿íﬁ¿ì¿ì	¿ì&¿ìU¿ìÑ¿ìä¿ìû¿ì¢¿ì£¿ìØ¿ìı¿î¿îJ¿îx¿î§¿î¶¿îß¿îÒ¿ï¿ïH¿ïf¿ï¿ïñ¿ïó¿ïÂ¿ñ4¿ñJ¿ñb¿ñ{¿ñã¿ñô¿ñ™¿ñ¬¿ñÓ¿ñÔ¿ñ˚¿ó-¿óM¿óm¿óq¿ór¿ó~¿óø¿óŒ¿ò¿ò¿ò,¿ò=¿ò?¿ò@¿òê¿òﬂ¿ô#¿ôR¿ôg¿ôz¿ô{¿ôí¿ô´¿ôƒ¿ô‘¿ô’¿ô·¿ö¿ö3¿öS¿öW¿öX¿öd¿öå¿öç¿öô¿öƒ¿õ¿õ¿õ¿õ`¿õa¿õm¿õ≠¿õÊ¿õË¿õÈ¿ú#¿úW¿úX¿úß¿úÚ¿ù ¿ù>¿ùK¿ùÅ¿ùÇ¿ùé¿ù¿¿ù‡¿ùÚ¿û¿ûi¿ûä¿ûó¿û¬¿û˘¿ûˇ¿ü¿ü¿üT¿ü•¿üÙ¿†B¿†x¿†∑¿†∏¿†ƒ¿°¿°G¿°I¿°J¿°ê¿°û¿°∫¿¢¿¢S¿¢§¿¢÷¿¢˚¿¢¸¿£H¿£w¿£í¿£ì¿£‰¿§0¿§?¿§[¿§\¿§´¿§∫¿§œ¿§–¿§Ú¿•¿•¿•B¿•d¿•e¿•}¿••¿•≈¿•Ê¿¶ ¿¶¿¶9¿¶?¿¶A¿¶B¿¶ì¿¶„¿ß¿ß¿ßT¿ß}¿ßé¿ß¥¿ß‘¿ßÈ¿®¿®[¿®x¿®y¿®«¿©¿©S¿©Y¿©™¿©Ï¿™¿™¿™(¿™=¿™N¿™b¿™∞¿™ ¿™◊¿™€¿™‹¿™˚¿´'¿´q¿´u¿´v¿´¬¿´ˆ¿¨%¿¨G¿¨ï¿¨ô¿¨ö¿¨Ë¿≠¿≠f¿≠g¿≠≥¿≠⁄¿≠˛¿Æ¿Æa¿Æg¿Æ}¿Æ©¿ÆÕ¿ÆÌ¿ÆÛ¿Ø¿Ø<¿Ø[¿Øa¿Øt¿Øõ¿Øü¿Ø†¿Ø◊¿∞$¿∞I¿∞[¿∞ú¿∞ø¿∞ ¿∞À¿∞˘¿±'¿±(¿±w¿±«¿≤¿≤`¿≤Æ¿≤Ø¿≤ﬁ¿≥ ¿≥¿≥L¿≥Y¿≥t¿≥z¿≥~¿≥¿≥–¿¥¿¥¿¥b¿¥Ç¿¥”¿µ ¿µS¿µü¿µÎ¿∂¿∂B¿∂[¿∂á¿∂Ω¿∂æ¿∂‚¿∑(¿∑)¿∑s¿∑Ω¿∑Ì¿∏¿∏-¿∏q¿∏w¿∏≤¿∏ı¿π¿πH¿πa¿πß¿πÂ¿∫6¿∫^¿∫ñ¿∫º¿∫Ë¿ª&¿ª[¿ªx¿ª™¿ª›¿º¿ºH¿ºP¿ºV¿ºW¿ºj¿ºú¿ºº¿ºÙ¿Ω¿Ω"¿Ω6¿Ωi¿Ωì¿Ω©¿Ωœ¿ΩÌ¿æ¿æB¿æn¿æÉ¿æ¨¿æ ¿æ˜¿ø¿øK¿ø`¿øö¿ø—¿ø¯¿¿'¿¿r¿¿ã¿¿‘¿¡¿¡A¿¡R¿¡Ä¿¡ä¿¡í¿¡„¿¬¿¬W¿¬¶¿¬¬¿¬‹¿√¿√B¿√e¿√~¿√©¿√ ¿√Á¿√¯¿ƒI¿ƒñ¿ƒÂ¿ƒÔ¿≈¿≈L¿≈v¿≈∑¿≈“¿∆ ¿∆1¿∆~¿∆∞¿∆‹¿«)¿«Z¿«á¿«–¿«˝¿»¿»¿»C¿»Ç¿»ø¿»ÿ¿…#¿…<¿…]¿…ì¿…ü¿…ß¿…ƒ¿…ˇ¿ -¿ P¿ v¿ ß¿ ı¿ ˆ¿À2¿À^¿Àä¿À¬¿ÀË¿Ã¿ÃJ¿Ãj¿Ã¥¿Ã¿¿Ã¿Õ1¿ÕY¿Õñ¿Õ±¿Õ‘¿Œ¿Œ¿ŒN¿Œu¿Œ§¿Œ√¿Œœ¿Œ◊¿ŒÒ¿œ¿œ0¿œ8¿œo¿œ°¿œÕ¿œ◊¿œﬂ¿–¿–>¿–X¿–t¿–Æ¿–‹¿–ˆ¿—¿—>¿—_¿—g¿—Ä¿—®¿—◊¿“¿“'¿“/¿“K¿“h¿“}¿“Å¿“Ç¿“é¿“‘¿” ¿”"¿”U¿”w¿”ù¿”ÿ¿‘¿‘,¿‘^¿‘¢¿‘´¿‘±¿‘ˆ¿’¿’-¿’y¿’ü¿’∑¿’€¿÷ ¿÷%¿÷-¿÷y¿÷Å¿÷∂¿◊¿◊,¿◊F¿◊l¿◊ì¿◊Æ¿◊∏¿◊¬¿◊Ÿ¿◊·¿◊Â¿◊Á¿◊Ë¿ÿ7¿ÿÖ¿ÿ—¿Ÿ!¿Ÿp¿Ÿé¿ŸØ¿Ÿˇ¿⁄J¿⁄ô¿⁄≤¿⁄–¿⁄È¿€¿€,¿€I¿€`¿€f¿€h¿€i¿€õ¿€æ¿€‰¿€¯¿€˘¿‹¿‹/¿‹0¿‹`¿‹ó¿‹ò¿‹Ã¿‹Õ¿‹Ú¿›1¿›2¿›j¿›ö¿›º¿› ¿›–¿›Û¿›˜¿›¯¿ﬁ:¿ﬁq¿ﬁì¿ﬁ°¿ﬁß¿ﬁ‚¿ﬁÊ¿ﬁË¿ﬁÈ¿ﬂ4¿ﬂ[¿ﬂé¿ﬂè¿ﬂ—¿‡¿‡_¿‡x¿‡√¿‡ƒ¿‡Í¿‡Î¿·¿·1¿·;¿·R¿·ú¿·¬¿·ÿ¿·ı¿‚#¿‚$¿‚L¿‚ê¿‚∂¿‚ƒ¿‚ ¿‚À¿‚Ë¿„1¿„2¿„c¿„∞¿„∂¿„∑¿„¯¿‰ ¿‰B¿‰à¿‰∞¿‰Î¿Â
¿ÂH¿Âq¿Â~¿Â…¿ÂÚ¿Â¯¿Â˘¿Ê"¿ÊS¿Êv¿Ê¢¿Êﬂ¿ÊÛ¿Á¿Á¿Á¿ÁI¿Áf¿Án¿Áo¿Áã¿Áå¿Á∞¿Á¥¿Áµ¿Á«¿Á…¿Á ¿Ë¿Ë5¿ËB¿Ëb¿Ëw¿Ë|¿Ë¨¿Ë¬¿È¿ÈK¿Èm¿È¿Èâ¿È∫¿È–¿Í¿Ís¿Í∫¿Í÷¿Î&¿Îh¿Î¢¿Î”¿Ï¿Ï¿Ï¿ÏD¿Ïy¿Ïù¿ÏÂ¿Ï¸¿Ì7¿ÌA¿ÌÄ¿ÌÅ¿Ìò¿ÌÈ¿Ó.¿Ó¿Ó…¿Ô¿ÔM¿Ôå¿Ô¥¿Ô˚¿9¿_¿o¿°¿À¿Ù¿Ò;¿ÒP¿Ò¢¿Ò„¿Ò˙¿Ú<¿Ú\¿Ú¢¿Ú ¿Û¿Û¿Û1¿ÛW¿Ûc¿Ûm¿Ûû¿Û≠¿Û‹¿Ûˆ¿Ù6¿Ùh¿ÙÉ¿Ù™¿Ù‘¿Ùﬁ¿ÙÊ¿ı¿ı2¿ıK¿ıÑ¿ı¶¿ıœ¿ı˚¿ˆ<¿ˆY¿ˆü¿ˆ ¿ˆ·¿ˆ˝¿˜¿˜B¿˜^¿˜Ä¿˜ù¿˜™¿˜µ¿˜–¿˜˝¿¯-¿¯k¿¯ò¿¯§¿¯∞¿¯Ÿ¿˘¿˘¿˘@¿˘\¿˘Ö¿˘è¿˘∏¿˘Ì¿˘˜¿˙¿˙1¿˙L¿˙T¿˙Z¿˙^¿˙_¿˙q¿˙s¿˙t¿˙û¿˙Ô¿˙¿˚'¿˚o¿˚É¿˚°¿˚Ï¿¸6¿¸O¿¸P¿¸°¿¸Ô¿˝?¿˝~¿˝£¿˝§¿˝Ì¿˛¿˛8¿˛9¿˛t¿˛ú¿˛ù¿˛∏¿˛»¿˛ ¿˛À¿ˇ¿ˇO¿ˇÄ¿ˇò¿ˇ§¿ˇø¿ˇ¿¿ ¿ 	¿ ¿ ;¿ ¿ §¿ ¬¿ Ë¿ È¿¿6¿i¿î¿º¿ﬁ¿‚¿„¿Ô¿¿B¿q¿í¿Ø¿∑¿Ω¿ˇ¿>¿e¿ß¿◊¿›¿·¿‚¿Ó¿¿6¿Q¿ò¿∆¿Ú¿!¿@¿]¿e¿k¿o¿p¿|¿ç¿¢¿¶¿®¿©¿ˆ¿¿¿b¿î¿ï¿‰¿¿K¿å¿ß¿∂¿›¿ﬁ¿˝¿C¿D¿Y¿q¿∞¿√¿	¿	¿	¿	*¿	O¿	{¿	Ø¿	–¿	Ó¿
¿
.¿
[¿
w¿
ö¿
¢¿
¶¿
ß¿
÷¿¿C¿U¿V¿b¿£¿ø¿¿¿Ã¿¿-¿g¿Ü¿∆¿ ¿À¿◊¿¿+¿/¿0¿<¿x¿î¿ò¿ô¿•¿Ì¿¿¿¿¿c¿Ç¿Ü¿á¿ì¿ÿ¿˜¿˚¿¸¿¿9¿f¿ã¿è¿ê¿ú¿Í¿¿¿¿¿N¿{¿†¿§¿•¿±¿‰¿¿8¿<¿=¿I¿Ä¿∞¿ÿ¿‹¿›¿È¿:¿]¿a¿b¿n¿®¿◊¿!¿_¿c¿d¿p¿∑¿Û¿9¿X¿£¿ß¿®¿¥¿˜¿-¿[¿_¿`¿l¿•¿ÿ¿˛¿¿8¿<¿=¿I¿ê¿»¿¯¿(¿,¿-¿9¿{¿ô¿ù¿û¿™¿Î¿ ¿M¿Q¿R¿^¿£¿⁄¿	¿¿¿¿Q¿Å¿©¿≠¿Æ¿∫¿˘¿-¿Y¿]¿^¿j¿°¿Õ¿¿O¿S¿T¿`¿´¿Â¿¿¿¿(¿w¿≥¿Â¿¿4¿O¿b¿k¿r¿v¿w¿É¿ ¿¿2¿6¿8¿9¿Ö¿ë¿¨¿»¿‹¿›¿"¿$¿%¿;¿q¿•¿¶¿∏¿Î¿ ¿ J¿ ô¿ ∆¿!¿!R¿!è¿!ê¿!π¿!˝¿!˛¿""¿"J¿"g¿"m¿"q¿"s¿"t¿"ø¿#¿#Q¿#U¿#ü¿#Í¿$.¿$K¿$c¿$ú¿$ù¿$Æ¿$Ø¿$Û¿%¿%4¿%J¿%N¿%O¿%â¿%…¿% ¿&¿&g¿&¥¿'¿'4¿'5¿'d¿'†¿'°¿'“¿'”¿'Á¿'Ë¿(¿(M¿(o¿(Ç¿(¿¿)¿)¿)¿)¿)6¿)8¿)9¿)e¿)ê¿)ë¿)√¿)Ì¿)Ó¿*;¿*d¿*∞¿*Í¿*Î¿*˜¿+(¿+)¿+L¿+É¿+Ñ¿+ª¿+ˇ¿, ¿,3¿,k¿,ì¿,¶¿,Û¿-C¿-I¿-M¿-N¿-Z¿-ü¿-π¿-Ÿ¿-‚¿-‰¿-Â¿.¿.5¿.R¿.S¿.®¿.ª¿.º¿.Ì¿/¿/¿/>¿/]¿/^¿/ê¿/∞¿/‚¿/„¿/˛¿0¿08¿0Z¿0|¿0ü¿0π¿0”¿0Ô¿0Û¿0Ù¿1¿1I¿1J¿1à¿1¿¿1¡¿1¿2¿28¿2S¿2ñ¿2„¿2È¿2Ì¿2Ó¿3¿3X¿3ä¿3’¿3Ÿ¿3⁄¿4¿4L¿4j¿4Ç¿4†¿4–¿5 ¿52¿5N¿5W¿5Y¿5Z¿5ç¿5∞¿5È¿6¿6¿6?¿6[¿6\¿6à¿6≤¿6≥¿6“¿6Ò¿7¿7)¿7/¿70¿7a¿7ü¿7Ω¿7‚¿7Ë¿7Ï¿7Ì¿8¿8k¿8ç¿8∑¿8·¿8˛¿9 ¿9h¿9¿9à¿9ä¿9ã¿9”¿:¿:P¿:ï¿:ƒ¿:≈¿:—¿:˚¿:¸¿;¿;G¿;l¿;ò¿;À¿;Ÿ¿;ﬂ¿<¿<S¿<r¿<¬¿<˘¿<˝¿<˛¿=,¿=c¿=Ü¿=á¿=ì¿=—¿=Î¿>*¿>D¿>M¿>O¿>P¿>Ñ¿>…¿?¿?¿?W¿?é¿?¡¿?Ì¿?Ô¿?¿@0¿@N¿@¿@´¿@¨¿@Ë¿A¿A¿AF¿Ac¿Ad¿A∞¿A≤¿A≥¿A·¿B¿B>¿BF¿BG¿Bó¿B“¿B·¿B„¿B‰¿C"¿CN¿Cz¿Cì¿C”¿C¿D/¿Dw¿Dè¿D»¿DŒ¿DÚ¿E=¿EC¿EG¿En¿Eã¿Eù¿Eü¿E†¿E‘¿EÛ¿F¿F0¿F4¿FE¿FG           ,   >   S   ÄÜ   Ä´   Ä’   Ä˝   ÅP  ÅpÅÅÅÉÅßÅ¶ Å©   Å‹   Ç     -Ö&¿ Ò¢Ö&á∞ÇÉ/// An object to manage playing audio from a URL, a locale file or an asset.
///
/// ```
/// final player = AudioPlayer();
/// await player.setUrl('https://foo.com/bar.mp3');
/// player.play();
/// await player.pause();
/// await player.setClip(start: Duration(seconds: 10), end: Duration(seconds: 20));
/// await player.play();
/// await player.setUrl('https://foo.com/baz.mp3');
/// await player.seek(Duration(minutes: 5));
/// player.play();
/// await player.pause();
/// await player.dispose();
/// ```
///
/// You must call [dispose] to release the resources used by this player,
/// including any temporary files created to cache assets. òë¢Õ†] †]†h áã/// Creates an [AudioPlayer].
///
/// Apps requesting remote URLs should set the [userAgent] parameter which
/// will be set as the `user-agent` header on all requests (except on web
/// where the browser's user agent will be used) to identify the client. If
/// unspecified, a platform-specific default will be supplied.
///
/// Request headers including `user-agent` are sent by default via a local
/// HTTP proxy which requires non-HTTPS support to be enabled (see the README
/// page for setup instructions). Alternatively, you can set
/// [useProxyForRequestHeaders] to `false` to allow supported platforms to
/// send the request headers directly without use of the proxy. On iOS/macOS,
/// this will use the `AVURLAssetHTTPUserAgentKey` on iOS 16 and above, and
/// macOS 13 and above, if `user-agent` is the only header used. Otherwise,
/// the `AVURLAssetHTTPHeaderFieldsKey` key will be used. On Android, this
/// will use ExoPlayer's `setUserAgent` and `setDefaultRequestProperties`.
/// For Linux/Windows federated platform implementations, refer to the
/// documentation for that implementation's support.
///
/// The player will automatically pause/duck and resume/unduck when audio
/// interruptions occur (e.g. a phone call) or when headphones are unplugged.
/// If you wish to handle audio interruptions manually, set
/// [handleInterruptions] to `false` and interface directly with the audio
/// session via the [audio_session](https://pub.dev/packages/audio_session)
/// package. If you do not wish just_audio to automatically activate the audio
/// session when playing audio, set [handleAudioSessionActivation] to `false`.
/// If you do not want just_audio to respect the global
/// [AndroidAudioAttributes] configured by audio_session, set
/// [androidApplyAudioAttributes] to `false`.
///
/// The default audio loading and buffering behaviour can be configured via
/// the [audioLoadConfiguration] parameter.†o†x†w  †Ü†å†ã  †´'†±†∞  †ÿ(†ﬁ†›  °.°°  °:°J°I  °\,°b°a  °é%°î°ì  )†°†Œ†¸°É°Ø°¡°Ω°√°»°…°À°Ã°‚°◊°‰¢°˜¢>¢"¢A¢K¢L¢u¢W¢w¢µ¢ù¢∑¢Ê¢◊¢ˆ¢Ë¢˘£££3££5£y£^£{9á¿Jà à //// The user agent to set on all HTTP requests. àdàYàY</// Whether to use the proxy server to send request headers. àx5àñàñ  à≤+àΩàΩ  à‚Åâ€â€ÄÌ/// This is `true` when the audio player needs to engage the native platform
/// side of the plugin to decode or play audio, and is `false` when the native
/// resources are not needed (i.e. after initial instantiation and after [stop]).âÂâÔÄèäuäu`/// This is set to [_nativePlatform] when [_active] is `true` and
/// [_idlePlatform] otherwise. äÉdäŸäŸ>/// Reflects the current platform immediately after it is set. äÏÄ§ãÅãÅs/// The interface to the native portion of the plugin. This will be disposed
/// and set to `null` when not in use. ãïÄêåål/// A pure Dart implementation of the platform interface for use when the
/// native platform is not needed. å*ÅRçbçbÅ/// The subscription to the event channel of the current platform
/// implementation. When switching between active and inactive modes, this is
/// used to cancel the subscription to the previous platform's events and
/// subscribe to the new platform's events. çÅÅQéªéªÅ
/// The subscription to the data event channel of the current platform
/// implementation. When switching between active and inactive modes, this is
/// used to cancel the subscription to the previous platform's events and
/// subscribe to the new platform's events. é◊Uè	è	  è09èJèJ  èmJèôèô  èºè…è…  è–!è÷è÷ èﬂèÔèèıêê  ê1ê1ê1 êAêBêGêLêL êXêa&êuêu  êã"êüêü  ê≤.ê¿ê¿ ê—êﬁêﬂê‰HêÍêÍ 	ëëëëë ë+ë%ë!ë'ë0"ëCëC  ëV5ë\ë\ ëoë~ëàëëáëâëäëèBëïëï ëØëæëŒëøëœë–ë’5ë€ë€ ëÌë¸ë˝íí	íí2íí í%í4í5í;í?í<íD1íJíJ íZíiíjípítíqíy1íí íèíûíüí•í©í¶íÆ@í¥í¥ í—í‡í·íÁíÌíËíÚ<í¯í¯ ìì"ì+ì#ì,ì-ì2;ì8ì8 ìNì]ìjì^ìiìkìlìq:ìwìw ìçìúì®ìùì©ì™ìØEìµìµ 
ì»ì◊ìÒìÿì‹ìÔì›ììÚìÛì¯<ì˛ì˛ 
îî&î1î'î+î/î,î0î2î3î8"î>î> îXîYîSîWîTî^>îdîd 
î{îäîèîãîéîêîõîïîëîóî†?î¶î¶ îæîÕî‹îŒî€î›îﬁî„=îÈîÈ î¸ïïïïïïïï$@ï*ï* ïGïVïWï]ïcï^ïh=ïnïn ïéïùï¢ïûï°ï£ï§ï©]ïØïØ 	ï’ï„ï˘ï‰ï˙ñïˇï˚ññ
ññ ññ;+ñVñV  ñj1ñoño ñóñü?ñ§ñ§ ñŸñ‚ ñÈñÈ óó$óó ó%ó.ó3ó3 óFóOóTóT ógóp/óàóà  ó£ó≥ó≥  ó∆óÕóÕ ó⁄ó‡'óÎóÎ  ò(òò  ò8Tòxòx9/// Counts how many times [_setPlatformActive] is called.òã5æÕ]øø-/// The previously set [AudioSource], if any.   ø.Tøbøb/// The latest [PlaybackEvent].   øÜrøƒøƒ!/// A stream of [PlaybackEvent]s.   ø¸p¿ @H¿ @H;/// The duration of the current audio or `null` if unknown.   ¿ @pw¿ @≈¿ @≈;/// The duration of the current audio or `null` if unknown.   ¿ @Îi¿ A*¿ A*&/// The duration of the current audio.   ¿ AXk¿ Aë¿ Aë"/// The current [ProcessingState].   ¿ A«ÄÄ¿ B	¿ B	#/// A stream of [ProcessingState]s.   ¿ BKQ¿ By¿ By"/// Whether the player is playing.   ¿ B†f¿ Bﬁ¿ Bﬁ*/// A stream of changing [playing] states.   ¿ C
T¿ C=¿ C=%/// The current volume of the player.   ¿ Cb]¿ Cô¿ Cô!/// A stream of [volume] changes.   ¿ C√Q¿ Cı¿ Cı$/// The current speed of the player.   ¿ D_¿ DS¿ DS%/// A stream of current speed values.   ¿ D{X¿ D¥¿ D¥+/// The current pitch factor of the player.   ¿ D◊f¿ E¿ E,/// A stream of current pitch factor values.   ¿ EA}¿ EÖ¿ EÖ8/// The current skipSilenceEnabled factor of the player.   ¿ E¬Äë¿ F¿ F9/// A stream of current skipSilenceEnabled factor values.   ¿ FWÄî¿ F†¿ F†9/// The position up to which buffered audio is available.   ¿ FÔ{¿ G*¿ G*#/// A stream of buffered positions.   ¿ GnÄ©¿ GÌ¿ GÌi/// The latest ICY metadata received through the audio source, or `null` if no
/// metadata is available.   ¿ HÄã¿ Hv¿ Hv?/// A stream of ICY metadata received through the audio source.   ¿ H™Äƒ¿ I¿ IS/// The current player state containing only the processing and playing
/// states.   ¿ Irj¿ I¨¿ I¨/// A stream of [PlayerState]s.   ¿ I‡Ä¢¿ J^¿ J^[/// The current sequence of indexed audio sources, or `null` if no audio
/// source is set.   ¿ JÜÄ°¿ J˜¿ J˜H/// A stream broadcasting the current sequence of indexed audio sources.   ¿ K+Ä®¿ K£¿ K£d/// The current shuffled sequence of indexed audio sources, or `null` if no
/// audio source is set.   ¿ K◊Äß¿ LH¿ LHU/// A stream broadcasting the current shuffled sequence of indexed audio
/// sources.   ¿ LÚÄø¿ MÖ¿ MÖÄÖ/// The index of the current item, or `null` if either no audio source is set,
/// or the current audio source has an empty sequence.   ¿ Mµq¿ MÙ¿ MÙ+/// A stream broadcasting the current item.   ¿ N*Äß¿ N£¿ N£a/// The current [SequenceState], or `null` if either [sequence]] or
/// [currentIndex] is `null`.   ¿ N’Äé¿ O)¿ O)6/// A stream broadcasting the current [SequenceState].   ¿ Ogc¿ O≠¿ O≠:/// Whether there is another item after the current index.   ¿ OŒl¿ P¿ P;/// Whether there is another item before the current index.   ¿ P>ÅÑ¿ Pˇ¿ PˇÄ´/// Returns [shuffleIndices] if [shuffleModeEnabled] is `true`, otherwise
/// returns the unshuffled indices. When no current audio source is set, this
/// returns `null`.   ¿ Q∆Ä⁄¿ Q’¿ Q’    ¿ R§ÄÑ¿ S¿ ST/// The index of the next item to be played, or `null` if there is no next
/// item.   ¿ S,Äí¿ Só¿ Só]/// The index of the previous item in play order, or `null` if there is no
/// previous item.   ¿ V∆O¿ V¿ V/// The current loop mode.   ¿ W^¿ WM¿ WM/// A stream of [LoopMode]s.   ¿ W{s¿ Wµ¿ Wµ./// Whether shuffle mode is currently enabled.   ¿ WÚÄÄ¿ X.¿ X.(/// A stream of the shuffle mode status.   ¿ XvÄá¿ Xø¿ Xø=/// The current Android AudioSession ID or `null` if not set.   ¿ YÄ¶¿ Y]¿ Y]H/// Broadcasts the current Android AudioSession ID or `null` if not set.   ¿ Y´Ä¶¿ Z¿ Z7/// A stream broadcasting every position discontinuity.   ¿ ZUÄÿ¿ ZŸ¿ ZŸv/// Whether the player should automatically delay playback in order to
/// minimize stalling. (iOS 10.0 or later only)   ¿ [1Äÿ¿ [õ¿ [õ\/// Whether the player can use the network for live streaming while paused on
/// iOS/macOS.   ¿ \Äë¿ \p¿ \pU/// The preferred peak bit rate (in bits per second) of bandwidth usage on iOS/macOS.   ¿ \¢Äî¿ ]¿ ]T/// Whether the player allows external playback on iOS/macOS, defaults to
/// false.   ¿ ]:Äù¿ ]µ¿ ]µb/// The `crossorigin` attribute set the `<audio>` element backing this player
/// instance on web.   ¿ ]€t¿ ^7¿ ^7N/// The current sink ID of the `<audio>` element backing this instance on web.   ¿ ^Sc¿ ^ä¿ ^ä'/// The current position of the player.   ¿ `|Éô¿ bï¿ bïÅÛ/// A stream tracking the current position of this player, suitable for
/// animating a seek bar. To ensure a smooth animation, this stream emits
/// values more frequently on short items where the seek bar moves more
/// quickly, and less frequenly on long items where the seek bar moves more
/// slowly. The interval between each update will be no quicker than once
/// every 16ms and no slower than once every 200ms.
///
/// See [createPositionStream] for more control over the stream parameters.    (ªbÉgº∫º∫Å@/// Old versions of just_audio used an asset caching system that created a
/// separate cache file per asset per player instance, and was highly
/// dependent on the app calling [dispose] to clean up afterwards. If the app
/// is upgrading from an old version of just_audio, this will delete the old
/// cache directory.   ¿ S¬É ¿ S«¿ S«  ¿ SŸ
¿ Sﬁ¿ S›   ¿ ^∫Åæ¿ ^√¿ ^√  ¿ ^”¿ ^‚¿ ^·   ¿ dà°¿ fü¿ füÇ`/// Creates a new stream periodically tracking the current position of this
/// player. The stream will aim to emit [steps] position updates from the
/// beginning to the end of the current audio source, at intervals of
/// [duration] / [steps]. This interval will be clipped between [minPeriod]
/// and [maxPeriod]. This stream will not emit values while audio playback is
/// paused or stalled.
///
/// Note: each time this method is called, a new stream is created. If you
/// intend to use this stream multiple times, you should hold a reference to
/// the returned stream and close it once you are done. ¿ f∫¿ fø¿ fæ  ¿ fœ6¿ fŸ¿ fÿ  ¿ g6¿ g¿ g  ¿ f∆¿ f‰¿ fÍ¿ fÚ¿ g¿ fˇ¿ fÛ¿ g¿ g ¿ g&¿ g.¿ g@¿ g;¿ g/¿ g=¿ læÉÜ¿ o¿ oÇ'/// Convenience method to set the audio source to a URL with optional headers,
/// preloaded by default, with an initial position of zero by default.
/// If headers are set, just_audio will create a cleartext local HTTP proxy on
/// your device to forward HTTP requests with headers included.
///
/// This is equivalent to:
///
/// ```
/// setAudioSource(AudioSource.uri(Uri.parse(url), headers: headers, tag: tag),
///     initialPosition: Duration.zero, preload: true);
/// ```
///
/// See [setAudioSource] for a detailed explanation of the options. ¿ o
¿ o&¿ o%  ¿ o0¿ oF¿ oE  ¿ oR¿ o]¿ o\  ¿ oq¿ ow¿ ov  ¿ oä¿ oì¿ oí  ¿ oÄ¿ pHÇå¿ qÊ¿ qÊÅu/// Convenience method to set the audio source to a file, preloaded by
/// default, with an initial position of zero by default.
///
/// This is equivalent to:
///
/// ```
/// setAudioSource(AudioSource.uri(Uri.file(filePath), tag: tag),
///     initialPosition: Duration.zero, preload: true);
/// ```
///
/// See [setAudioSource] for a detailed explanation of the options. ¿ q˜¿ qˇ¿ q˛  ¿ r¿ r¿ r  ¿ r-¿ r3¿ r2  ¿ rF¿ rO¿ rN  ¿ r<¿ rÿÉä¿ u6¿ u6Ç//// Convenience method to set the audio source to an asset, preloaded by
/// default, with an initial position of zero by default.
///
/// For assets within the same package, this is equivalent to:
///
/// ```
/// setAudioSource(AudioSource.uri(Uri.parse('asset:///$assetPath'), tag: tag),
///     initialPosition: Duration.zero, preload: true);
/// ```
///
/// If the asset is to be loaded from a different package, the [package]
/// parameter must be given to specify the package name.
///
/// See [setAudioSource] for a detailed explanation of the options. ¿ uD¿ uL¿ uK  ¿ u\¿ ue¿ ud  ¿ uq¿ uw¿ uv  ¿ uä¿ uï¿ uî  ¿ u©¿ u≤¿ u±  ¿ uÄ¿ vfáñ¿ {¿ {Ñy/// Sets the source from which this audio player should fetch audio.
///
/// By default, this method will immediately start loading audio and return
/// its duration as soon as it is known, or `null` if that information is
/// unavailable. Set [preload] to `false` if you would prefer to delay loading
/// until some later point, either via an explicit call to [load] or via a
/// call to [play] which implicitly loads the audio. If [preload] is `false`,
/// a `null` duration will be returned. Note that the [preload] option will
/// automatically be assumed as `true` if `playing` is currently `true`.
///
/// Optionally specify [initialPosition] and [initialIndex] to seek to an
/// initial position within a particular item (defaulting to position zero of
/// the first item).
///
/// When [preload] is `true`, this method may throw:
///
/// * [Exception] if no audio source has been previously set.
/// * [PlayerException] if the audio source was unable to be loaded.
/// * [PlayerInterruptedException] if another audio source was loaded before
/// this call completed or the player was stopped or disposed of before the
/// call completed. ¿ {0¿ {=¿ {<  ¿ {J¿ {P¿ {O  ¿ {c¿ {i¿ {h  ¿ {z¿ {Ö¿ {Ñ  ¿ {Y¿ ~ É·¿ ¸¿ ¸Å’/// Starts loading the current audio source and returns the audio duration as
/// soon as it is known, or `null` if unavailable.
///
/// This method throws:
///
/// * [Exception] if no audio source has been previously set.
/// * [PlayerException] if the audio source was unable to be loaded.
/// * [PlayerInterruptedException] if another call to [load] happened before
/// this call completed or the player was stopped or disposed of before the
/// call could complete.   ¿ ÅÂÄ‚¿ ÅÍ¿ ÅÍ    ¿ ÇÀÇ`¿ Ç–¿ Ç–    ¿ Ö/[¿ Ö4¿ Ö4  ¿ ÖI¿ ÖV¿ ÖU   ¿ Öéá¿ Ö†¿ Ö†  ¿ Ö¶¿ Öª¿ Ö∫  ¿ Öƒ¿ Ö—¿ Ö–  ¿ Öﬂ%¿ ÖÙ¿ ÖÛ   ¿ åîÉZ¿ çÒ¿ çÒÅ@/// Clips the current [AudioSource] to the given [start] and [end]
/// timestamps. If [start] is null, it will be reset to the start of the
/// original [AudioSource]. If [end] is null, it will be reset to the end of
/// the original [AudioSource]. This method cannot be called from the
/// [ProcessingState.idle] state. ¿ é¿ é¿ é  ¿ é¿ é¿ é  ¿ é!¿ é*¿ é)   ¿ èÚã¿ î/¿ î/Ñ/// Tells the player to play audio at the current [speed] and [volume] as soon
/// as an audio source is loaded and ready to play. If an audio source has
/// been set but not preloaded, this method will also initiate the loading.
/// The [Future] returned by this method completes when the playback completes
/// or is paused or stopped. If the player is already playing, this method
/// completes immediately.
///
/// This method causes [playing] to become true, and it will remain true
/// until [pause] or [stop] is called. This means that if playback completes,
/// and then you [seek] to an earlier position in the audio, playback will
/// continue playing from that position. If you instead wish to [pause] or
/// [stop] playback on completion, you can call either method as soon as
/// [processingState] becomes [ProcessingState.completed] by listening to
/// [processingStateStream].
///
/// This method activates the audio session before playback, and will do
/// nothing if activation of the audio session fails for any reason.   ¿ õÇö¿ õp¿ õpS/// Pauses the currently playing media. This method does nothing if
/// ![playing].   ¿ ù©ÅC¿ ù∂¿ ù∂  ¿ ùŒ¿ ù„¿ ù‚  ¿ ùÏ¿ ù˛¿ ù˝   ¿ ûÉE¿ °¿ °Ç/// Stops playing audio and releases decoders and other native platform
/// resources needed to play audio. The current audio source state will be
/// retained and playback can be resumed at a later point in time.
///
/// Use [stop] if the app is done playing audio for now but may need still
/// want to resume playback later. Use [dispose] when the app is completely
/// finished playing audio. Use [pause] instead if you would like to keep the
/// decoders alive so that the app can quickly resume audio playback.   ¿ ¢9Ä˝¿ ¢à¿ ¢à?/// Sets the volume of this player, where 1.0 is normal volume. ¿ ¢í¿ ¢†¿ ¢ü   ¿ £:Ç¿ £ß¿ £ß[/// Sets whether silence should be skipped in audio playback. (Currently
/// Android only). ¿ £Ω¿ £√¿ £¬   ¿ •NÇM¿ ¶O¿ ¶OÄÎ/// Sets the playback speed to use when [playing] is `true`, where 1.0 is
/// normal speed. Note that values in excess of 1.0 may result in stalls if
/// the playback speed is faster than the player is able to downloaded the
/// audio. ¿ ¶X¿ ¶f¿ ¶e   ¿ ßüÅè¿ ß‚¿ ß‚3/// Sets the factor by which pitch will be shifted. ¿ ßÎ¿ ß˘¿ ß¯   ¿ ©2Ål¿ ©…¿ ©…ÄÖ/// Sets the [LoopMode]. Looping will be gapless on Android, iOS and macOS. On
/// web, there will be a slight gap at the loop point. ¿ ©’¿ ©ﬂ¿ ©ﬁ   ¿ ™¢ÅQ¿ ™€¿ ™€)/// Sets whether shuffle mode is enabled. ¿ ™Ò¿ ™˜¿ ™ˆ   ¿ ´˜ÅÓ¿ ¨º¿ ¨ºÄ±/// Recursively shuffles the children of the currently loaded [AudioSource].
/// Each [ConcatenatingAudioSource] will be shuffled according to its
/// configured [ShuffleOrder].   ¿ ≠ÈÇ3¿ ÆÇ¿ ÆÇÄá/// Sets automaticallyWaitsToMinimizeStalling for AVPlayer in iOS 10.0 or later, defaults to true.
/// Has no effect on Android clients ¿ Æ±/¿ ÆΩ¿ Æº   ¿ ∞ Çw¿ ∞ë¿ ∞ë_/// Sets canUseNetworkResourcesForLiveStreamingWhilePaused on iOS/macOS,
/// defaults to false. ¿ ∞Õ<¿ ∞Ÿ¿ ∞ÿ   ¿ ≤õÅd¿ ≤Ë¿ ≤Ë=/// Sets preferredPeakBitRate on iOS/macOS, defaults to true. ¿ ≥!¿ ≥¿ ≥   ¿ ¥Åè¿ ¥S¿ ¥S@/// Sets allowsExternalPlayback on iOS/macOS, defaults to false. ¿ ¥t!¿ ¥Ä¿ ¥   ¿ µñÑ¨¿ ∂¿ ∂Å@/// Seeks to a particular [position]. If a composition of multiple
/// [AudioSource]s has been loaded, you may also specify [index] to seek to a
/// particular item within that sequence. This method has no effect unless
/// an audio source has been loaded.
///
/// A `null` [position] seeks to the head of a live stream. ¿ ∂ı¿ ∑¿ ∑  ¿ ∑
¿ ∑¿ ∑   ¿ ∫FÄ∏¿ ∫ö¿ ∫öD/// Seek to the next item, or does nothing if there is no next item.   ¿ ªÄÃ¿ ª^¿ ª^L/// Seek to the previous item, or does nothing if there is no previous item.   ¿ ª“Ç¿ º~¿ º~Äö/// Set the Android audio attributes for this player. Has no effect on other
/// platforms. This will cause a new Android AudioSession ID to be generated. ¿ ºü&¿ º∑¿ º∂   ¿ Ω›Åô¿ ΩÍ¿ ΩÍ  ¿ æ¿ æ"¿ æ!  ¿ æ1&¿ æI¿ æH   ¿ øzÑ¿ ¬¿ ¬Çj/// Set the `crossorigin` attribute on the `<audio>` element backing this
/// player instance on web (see
/// [HTMLMediaElement crossorigin](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin) ).
///
/// If [webCrossOrigin] is null (the initial state), the URL will be fetched
/// without CORS. If it is `useCredentials`, a CORS request will be made
/// exchanging credentials (via cookies/certificates/HTTP authentication)
/// regardless of the origin. If it is 'anonymous', a CORS request will be
/// made, but credentials are exchanged only if the URL is fetched from the
/// same origin. ¿ ¬¿ ¬)¿ ¬(   ¿ √íÅ$¿ √Œ¿ √Œ,/// Sets a specific device output id on Web. ¿ √€¿ √„¿ √‚   ¿ ƒ∫Ñ1¿ ≈?¿ ≈?s/// Release all resources associated with this player. You must invoke this
/// after you are done with the player.   ¿ »Ô™ñ¿  ^¿  ^ÅM/// Switch to using the native platform when [active] is `true` and using the
/// idle platform when [active] is `false`. If an audio source has been set,
/// the returned future completes with its duration if known, or `null`
/// otherwise.
///
/// The platform will not switch if [active] == [_active] unless [force] is
/// `true`. ¿  q¿  w¿  v  ¿  Ö¿  ó¿  ñ  ¿  •¿  ´¿  ™  ¿  ≤¿ ÛâÅŸ¿ Ûª¿ Ûª"/// Dispose of the given platform. ¿ ÛÃ¿ Û·¿ Û‡   ¿ ıfÅ`¿ ˆ%¿ ˆ%Ä§/// Clears the plugin's internal asset cache directory. Call this when the
/// app's assets have changed to force assets to be re-fetched from the asset
/// bundle.    ¿ ˆ ÉÓ¿ ˆ ¿ ˜äÄπ/// Captures the details of any error accessing, loading or playing an audio
/// source, including an invalid or inaccessible URL, or an audio encoding that
/// could not be understood. ¿ ˙{¿ ˙ ¿ ˙¿ ˙  ¿ ˙	¿ ˙¿ ˙  ¿ ˙¿ ˙$¿ ˙#  ¿ ˙-¿ ˙D¿ ˙C  
¿ ˙]¿ ˙U¿ ˙g¿ ˙_¿ ˙{¿ ˙|¿ ˙j¿ ˙z¿ ˙k¿ ˙s¿ ˜≥Äò¿ ¯G¿ ¯GÄÖ/// On iOS and macOS, maps to `NSError.code`. On Android, maps to
/// `ExoPlaybackException.type`. On Web, maps to `MediaError.code`. ¿ ¯PÄ¡¿ ˘
¿ ˘
Ä•/// On iOS and macOS, maps to `NSError.localizedDescription`. On Android,
/// maps to `ExoPlaybackException.getMessage()`. On Web, a generic message
/// is provided. ¿ ˘ÄË¿ ˘˜¿ ˘˜Äø/// On Android/iOS/macOS, contains details of the error. For errors associated
/// with a particular audio source, the `"index"` key maps to the index of the
/// audio source in the sequence.   ¿ ˙Ç4¿ ˙ï¿ ˙ï   ¿ ˙Ç¿ ˙É ¿ ˙∫Å,¿ ˙∫¿ ˚=|/// An error that occurs when one operation on the player has been interrupted
/// (e.g. by another simultaneous operation). ¿ ˚ã)¿ ˚ã ¿ ˚ã¿ ˚•  ¿ ˚¶¿ ˚¨¿ ˚´   ¿ ˚q¿ ˚¿ ˚    ¿ ˚∏,¿ ˚À¿ ˚À   ¿ ˚∏¿ ˚π ¿ ˚Ëã†¿ ˚Ë¿ ¸6G/// Encapsulates the playback state and current position of the player. ¿ ˇ"Å@¿ ˇ" ¿ ˇ"¿ ˇ/  ¿ ˇ6+¿ ˇ<¿ ˇ;  ¿ ˇg¿ ˇr¿ ˇq  ¿ ˇÅ#¿ ˇá¿ ˇÜ  ¿ ˇ™%¿ ˇ∞¿ ˇØ  ¿ ˇ’¿ ˇ€¿ ˇ⁄  ¿ ˇË¿ ˇÓ¿ ˇÌ  ¿ ˇ˛¿ ¿   ¿ ¿ ¿   ¿ ˇM¿ ˇ\¿ ˇ]¿ ˇó¿ ˇü¿ ˇ†¿ ˇ¬¿ ˇ ¿ ˇÀ¿ C¿ 8¿ P¿ E¿ S¿ [¿ \¿ _¿ `¿ ¸HI¿ ¸Ç¿ ¸Ç!/// The current processing state. ¿ ¸ñÄÄ¿ ˝¿ ˝b/// When the last time a position discontinuity happened, as measured in time
/// since the epoch. ¿ ˝A¿ ˝N¿ ˝N!/// The position at [updateTime]. ¿ ˝a:¿ ˝ã¿ ˝ã/// The buffer position. ¿ ˝†H¿ ˝‡¿ ˝‡-/// The media duration, or `null` if unknown. ¿ ˝Ìl¿ ˛N¿ ˛NK/// The latest ICY metadata received through the audio stream if available. ¿ ˛^h¿ ˛∫¿ ˛∫N/// The index of the currently playing item, or `null` if no item is selected. ¿ ˛ÀR¿ ˇ¿ ˇ//// The current Android AudioSession ID if set. ¿ÀÄ¿ﬂ¿ﬂ   ¿À¿Ã ¿ fÉa¿ ∑¿ ∑@/// Returns a copy of this event with given properties replaced. ¿ ∆ ¿ ÿ¿ ◊  ¿ Ï¿ ˜¿ ˆ  ¿¿¿  ¿$¿/¿.  ¿D¿O¿N  ¿\¿j¿i  ¿z¿Ä¿  ¿ë¿ó¿ñ   ¿øÅÎ¿Ÿ¿Ÿ  ¿‹¿‰¿„  ¿ø¿¿¿ÆÄÿ¿¡¿¡   ¿Æ¿Ø ¿	(É¶¿	(¿
OÅ /// Encapsulates the playing and processing states. These two states vary
/// orthogonally, and so if [processingState] is [ProcessingState.buffering],
/// you can check [playing] to determine whether the buffering occurred while
/// the player was playing or while the player was paused. ¿.0¿. ¿.¿9  ¿:¿@¿?  ¿H¿N¿M   ¿
_n¿
∆¿
∆W/// Whether the player will play when [processingState] is
/// [ProcessingState.ready]. ¿
“W¿¿//// The current processing state of the player. ¿ªF¿œ¿œ   ¿ª¿º ¿bU¿u¿u   ¿b¿c¿Ä«¿¿  ¿"¿*¿)  ¿¿ ¿–Ç¿–¿÷  ¿ì2¿ì ¿ì¿ö  ¿ú¿´¿™  ¿±¿¿¿ø   ¿‚¿¿  ¿˘¿¿  ¿8¿¿   ¿¿ ¿ÄÄ¿¿  ¿+¿;¿:   ¿…9¿‹¿‹   ¿…¿ ¿BÄß¿\¿\  ¿_¿g¿f  ¿B¿C ¿ÌÑê¿Ì¿Û  ¿µÄµ¿µ ¿µ¿ø  ¿∆¿’¿‘  ¿·¿¿Ô  ¿˙¿	¿  ¿¿!¿   ¿6¿E¿D  ¿M¿\¿[   ¿¿¿  ¿¿&¿&  ¿/¿=¿=  ¿E¿P¿P  ¿d¿r¿r  ¿y¿Ö¿Ö  ¿4¿¿   ¿¿ ¿íÅ¿§¿§  ¿±¿ƒ¿√   ¿nÄë¿Å¿Å   ¿n¿o¿;Å@¿U¿U  ¿X¿`¿_  ¿;¿< ¿Çò¿¿Ö  ¿Ë9¿Ë ¿Ë¿Û  ¿ı¿¿  ¿	¿¿   ¿ï¿§¿§  ¿¨¿æ¿æ  ¿%;¿9¿9   ¿%¿& ¿ Å¿›¿›  ¿Í¿˛¿˝   ¿dÄ±¿~¿~  ¿Å¿â¿à  ¿d¿e ¿Ñâ¿¿˘ÄŸ/// Encapsulates the [sequence] and [currentIndex] state and ensures
/// consistency such that [currentIndex] is within the range of
/// `sequence.length`. If `sequence.length` is 0, then [currentIndex] is also
/// 0. ¿s¿ ¿¿å  ¿ç¿ì¿í  ¿ú¿¢¿°  ¿Ø¿µ¿¥  ¿ ¿–¿œ  ¿„¿È¿Ë   ¿X¿[¿[./// The sequence of the current [AudioSource]. ¿hM¿©¿©4/// The index of the current source in the sequence. ¿∫>¿Í¿Í/// The current shuffle order ¿˝D¿/¿/$/// Whether shuffle mode is enabled. ¿F4¿r¿r/// The current loop mode. ¿ˆÄä¿8¿8'/// The current source in the sequence.   ¿ÑÅ¿/¿/Äâ/// The effective sequence. This is equivalent to [sequence]. If
/// [shuffleModeEnabled] is true, this is modulated by [shuffleIndices].      ¿§Ée¿§¿ÌB/// Configuration options to use when loading audio from a source. ¿IÄá¿O ¿O¿e  ¿l¿r¿q  ¿à¿é¿ç  ¿•$¿´¿™   ¿^¿U¿U1/// Bufferring and loading options for iOS/macOS. ¿k]¿∂¿∂./// Buffering and loading options for Android. ¿Õw¿%¿%./// Speed control for live streams on Android.   ¿‘Å3¿Ú¿Ú     ¿Ö“¿¿B0/// Buffering and loading options for iOS/macOS. ¿!UÄ·¿![ ¿![¿!l  ¿!s0¿!y¿!x  ¿!©#¿!Ø¿!Æ  ¿!“>¿!ÿ¿!◊  ¿"¿"¿"  ¿!ü¿"¿XÄ≈¿˘¿˘Äë/// (iOS/macOS) Whether the player will wait for sufficient data to be
/// buffered before starting playback to avoid the likelihood of stalling. ¿"ÄÍ¿Ó¿ÓÄµ/// (iOS/macOS) The duration of audio that should be buffered ahead of the
/// current position. If not set or `null`, the system will try to set an
/// appropriate buffer duration. ¿ Ä¿¿ †¿ †/// (iOS/macOS) Whether the player can continue downloading while paused to
/// keep the state up to date with the live stream. ¿ ÷z¿!<¿!<S/// (iOS/macOS) If specified, limits the download bandwidth in bits per
/// second.   ¿":Å°¿"S¿"S     ¿#ﬂáé¿#ﬂ¿$./// Buffering and loading options for Android. ¿'ÀÅß¿'— ¿'—¿'„  ¿'Í4¿'¿'Ô  ¿($4¿(*¿()  ¿(^C¿(d¿(c  ¿(ßH¿(≠¿(¨  ¿(ı¿(˚¿(˙  ¿)-¿)¿)  ¿)D'¿)J¿)I   ¿(¿(	¿(¿(¿(¿(¿(¿(=¿(C¿(K¿(W¿(S¿(L¿(U¿(¿(Ö¿(ç¿(†¿(ö¿(é¿(ú¿(’¿(€¿(„¿(Ó¿(Î¿(‰¿(Ì¿)9¿)^¿)f¿)g¿$+Äã¿$•¿$•f/// (Android) The minimum duration of audio that should be buffered ahead of
/// the current position. ¿$ªÄã¿%5¿%5f/// (Android) The maximum duration of audio that should be buffered ahead of
/// the current position. ¿%KÄò¿% ¿% k/// (Android) The duration of audio that must be buffered before starting
/// playback after a user action. ¿%ËÄ™¿&l¿&lp/// (Android) The duration of audio that must be buffered before starting
/// playback after a buffer depletion. ¿&óM¿&”¿&”./// (Android) The target buffer size in bytes. ¿&ÈÄç¿'V¿'V]/// (Android) Whether to prioritize buffer time constraints over buffer size
/// constraints. ¿'{K¿'¥¿'¥'/// (Android) The back buffer duration.   ¿)vÅı¿)ê¿)ê     ¿+oâå¿+o¿+§./// Speed control for live streams on Android. ¿0›Å¡¿0„ ¿0„¿1  ¿1	$¿1¿1  ¿13$¿19¿18  ¿1]3¿1c¿1b  ¿1ñ$¿1ú¿1õ  ¿1¿F¿1∆¿1≈  ¿2T¿2¿2  ¿2f1¿2l¿2k  ¿1)¿1S¿1v¿1|¿1Ñ¿1è¿1å¿1Ö¿1é¿1∑¿1Ê¿1Ï¿1Ù¿2¿2¿1ı¿2¿2?¿2E¿2M¿2_¿2Z¿2N¿2\¿2í¿+»Ä¿¿,p¿,pÄñ/// (Android) The minimum playback speed to use when adjusting playback speed
/// to approach the target live offset, if none is defined by the media. ¿,çÄ¿¿-5¿-5Äñ/// (Android) The maximum playback speed to use when adjusting playback speed
/// to approach the target live offset, if none is defined by the media. ¿-R|¿-Ω¿-ΩW/// (Android) The minimum interval between playback speed changes on a live
/// stream. ¿-”Å	¿.√¿.√Ä‹/// (Android) The proportional control factor used to adjust playback speed on
/// a live stream. The adjusted speed is calculated as: `1.0 +
/// proportionalControlFactor * (currentLiveOffsetSec - targetLiveOffsetSec)`. ¿.·Äπ¿/|¿/|Äá/// (Android) The maximum difference between the current live offset and the
/// target live offset within which the speed 1.0 is used. ¿/üÄó¿0¿0`/// (Android) The increment applied to the target live offset whenever the
/// player rebuffers. ¿0;Äù¿0¥¿0¥g/// (Android) The factor for smoothing the minimum possible live offset
/// achievable during playback.   ¿2¢ÇW¿2…¿2…     ¿4˝ÅÚ¿4˝¿5  ¿5êj¿5ñ ¿5ñ¿5≥  ¿5∫¿5¿¿5ø  ¿5‹¿5‚¿5·   ¿5%6¿5D¿5D  ¿5_,¿5y¿5y    ¿5˛ÄÔ¿6#¿6#     ¿6ÒÅ.¿6Ò¿6˜  ¿7<H¿7B ¿7B¿7T  ¿7V+¿7\¿7[  ¿7|¿7)¿7¿7    ¿7àÄï¿7¢¿7¢     ¿8!Çº¿8!¿8'  ¿9Ä°¿9% ¿9%¿9<  ¿9C)¿9I¿9H  ¿9r0¿9x¿9w  ¿9®¿9Æ¿9≠  ¿9h¿9ù¿9∏¿8C/¿8P¿8P ¿8n¿8l¿8q¿8v/¿8É¿8É ¿8°¿8ü¿8§¿8™(¿8µ¿8µ  ¿8÷.¿8·¿8·  ¿9¿9¿9    ¿9ƒÅ¿9„¿9„     ¿:ﬂä;¿:ﬂ¿;0J/// A local proxy HTTP server for making remote GET requests with headers.  ¿;E¿;U¿;U  ¿;`¿;e¿;e ¿;p¿;z^¿;»¿;»*/// Maps request keys to [_ProxyHandler]s.¿;÷¿;◊¿;›ÄÜ¿<N¿<Nd/// The port this server is bound to on localhost. This is set only after
/// [start] has completed.    ¿<gÇz¿<È¿<Èy/// Register a [UriAudioSource] to be served through this proxy. This may be
/// called only after [start] has completed. ¿<˚¿=¿=
   ¿>ÂÅH¿?j¿?j|/// Register a [StreamAudioSource] to be served through this proxy. This may
/// be called only after [start] has completed. ¿?¿?í¿?ë   ¿@1ÄÇ¿@5¿@5  ¿@@¿@S¿@R   ¿@∑ÅS¿A◊¿A◊Å/// A unique key for each request that can be processed by this proxy,
/// made up of the URL path and query string. It is not possible to
/// simultaneously track requests that have the same URL path and query
/// but differ in other respects such as the port or headers. ¿A„¿AË¿AÁ   ¿BÄî¿BS¿BS2/// Start the server if it is not already running.   ¿B¶Å‚¿Bœ¿Bœ/// Starts the server.   ¿DåÄå¿D≥¿D≥/// Stops the server    ¿EÉÍ¿E¿E_</// Encapsulates the start and end of an HTTP range request. ¿F≥(¿F≥ ¿F≥¿Fƒ  ¿F≈
¿FÀ¿F   ¿F—¿F◊¿F÷   ¿EuF¿E∂¿E∂4/// The starting byte position of the range request. ¿E¿{¿F8¿F8h/// The last byte position of the range request, or `null` if requesting
/// until the end of the media. ¿F@o¿Fà¿Fà</// The end byte position (exclusive), defaulting to `null`.   ¿FﬂÄÑ¿G¿G+/// Format a range header for this request.    ¿GgÅù¿Gµ¿Gµ1/// Creates an [_HttpRangeRequest] from [header]. ¿Gª¿G ¿G…    ¿IÇ†¿I¿IPA/// Encapsulates the range information in an HTTP range response. ¿J6:¿J6 ¿J6¿JH  ¿JI
¿JO¿JN  ¿JU¿J[¿JZ  ¿J_¿Je¿Jd   ¿Ig>¿I†¿I†,/// The starting byte position of the range. ¿I™8¿Iﬂ¿Iﬂ(/// The last byte position of the range. ¿IÁJ¿J'¿J'2/// The total number of bytes in the entire media. ¿JtC¿J¶¿J¶&/// The end byte position (exclusive).   ¿Jª^¿JÈ¿JÈ"/// The number of bytes requested.   ¿KÄâ¿Kg¿Kg</// The content-range header value to use in HTTP responses.      ¿K™és¿K™¿LíÄÿ/// Specifies a source of audio to be played. Audio sources are composable
/// using the subclasses of this class. The same [AudioSource] instance should
/// not be used simultaneously by more than one [AudioPlayer]. ¿W{!¿W{ ¿W{¿WÜ   ¿Wè¿Wã¿Wë¿Wñ¿Wó¿Wô¿Wö¿L¢¿LØ¿LØ  ¿L∂¿L√¿L√  ¿X%.¿X1¿X1    ¿Y&¿Y/¿Y/    ¿Y<¿YJ¿YJ    ¿Y]-¿Yq¿Yq   ¿Y]¿Y^ ¿Lœá¿Q≈¿Q≈Ñ≥/// Creates an [AudioSource] from a [Uri] with optional headers by
/// attempting to guess the type of stream. On iOS, this uses Apple's SDK to
/// automatically detect the stream type. On Android, the type of stream will
/// be guessed from the extension.
///
/// If you are loading DASH or HLS streams that do not have standard "mpd" or
/// "m3u8" extensions in their URIs, this method will fail to detect the
/// stream type on Android. If you know in advance what type of audio stream
/// it is, you should instantiate [DashAudioSource] or [HlsAudioSource]
/// directly.
///
/// If headers are set, just_audio will create a cleartext local HTTP proxy on
/// your device to forward HTTP requests with headers included.
///
/// The [tag] is for associating your app's own data with each audio source,
/// e.g. title, cover art, a primary key for your DB. Such data can be
/// conveniently retrieved from the tag while rendering the UI.
///
/// When using just_audio_background, [tag] must be a MediaItem, a class
/// provided by that package. If you wish to have more control over the tag
/// for background audio purposes, consider using the plugin audio_service
/// instead of just_audio_background. ¿Q…¿QŒ¿QÕ  ¿QŸ¿QÔ¿QÓ  ¿Q˜¿R ¿Qˇ   ¿SﬁÅ+¿T•¿T•Ä¢/// Convenience method to create an audio source for a file.
///
/// This is equivalent to:
///
/// ```
/// AudioSource.uri(Uri.file(filePath), tag: tag);
/// ``` ¿T™¿T≤¿T±  ¿Tº¿T≈¿Tƒ   ¿UÇj¿Vî¿VîÅ\/// Convenience method to create an audio source for an asset.
///
/// For assets within the same package, this is equivalent to:
///
/// ```
/// AudioSource.uri(Uri.parse('asset:///$assetPath'), tag: tag);
/// ```
///
/// If the asset is to be loaded from a different package, the [package]
/// parameter must be given to specify the package name. ¿Vö¿V¢¿V°  ¿V≥¿Vº¿Vª  ¿Vƒ¿VÕ¿VÃ   ¿W†ÄÅ¿Wæ¿Wæ  ¿W≈¿W“¿W—  ¿W†¿W°¿XW#¿X\¿X\  ¿Xf¿Xl¿Xk   ¿X~l¿Xî¿Xî   ¿X~¿X¿XÓ ¿Y¿Y    ¿YéÄç¿Y®¿Y®  ¿Y´¿Y≥¿Y≤  ¿Yé¿Yè ¿ZÅs¿Z¿Zb3/// An [AudioSource] that can appear in a sequence. ¿Zπ.¿Zπ ¿Zπ¿ZÀ  ¿ZÕ¿Z”¿Z“  ¿Z◊¿Z›¿Z‹   ¿Zç¿Zõ¿Zõ  ¿Z¢¿Z¨¿Z¨  ¿[ <¿[I¿[I   ¿[ ¿[!¿[`0¿[z¿[z   ¿[`¿[a ¿ZÎ1¿Z¸¿Z¸  ¿[¿[¿[  ¿ZÎ¿ZÏ ¿[îãƒ¿[î¿[L/// An abstract class representing audio sources that are loaded from a URI. ¿\kv¿\k ¿\k¿\y  ¿\z¿\Ä¿\  ¿\Ö¿\ã¿\ä  ¿\ì¿\ú¿\õ  ¿\†¿\´¿\™  	¿\Ω¿\¬¿\ﬂ¿\∆¿\√¿\»¿\’¿\Õ¿\◊¿\¿\(¿\(  ¿\/"¿\J¿\J  ¿\U¿\Z¿\Z  ¿\ÂÄ€¿]õ¿]õÄß/// If [uri] points to an asset, this gives us [_overrideUri] which is the URI
/// of the copied asset on the filesystem, otherwise it gives us the original
/// [uri].   ¿]ƒÅ,¿]›¿]›     ¿^ÙÅ—¿_¿_  ¿_¿_!¿_   ¿^Ù¿^ı¿`…Öê¿`’¿`’  ¿`‡¿`Ë¿`Á   ¿f]Ä˘¿fß¿fß:/// Get file for caching asset media with proper extension ¿fµ¿f√¿f¬    ¿gZÑ&¿gZ¿i∏ÇW/// An [AudioSource] representing a regular media file such as an MP3 or M4A
/// file. The following URI schemes are supported:
///
/// * file: loads from a local file (provided you give your app permission to
/// access that file).
/// * asset: loads from a Flutter asset (not supported on Web).
/// * http(s): loads from an HTTP(S) resource.
///
/// On platforms except for the web, the supplied [headers] will be passed with
/// the HTTP(S) request.
///
/// If headers are set, just_audio will create a cleartext local HTTP proxy on
/// your device to forward HTTP requests with headers included. ¿jv¿j ¿j¿j1  ¿j7	¿j>¿j=  ¿jH¿jO¿jN  ¿j[	¿jb¿ja  ¿jj¿jq¿jp  ¿j~¿jÑ¿jÉ   ¿iÍ,¿j¿j    ¿jïÄÈ¿j¥¿j¥   ¿jï¿jñ ¿kÇÑI¿kÇ¿n=Ç¥/// An [AudioSource] representing a DASH stream. The following URI schemes are
/// supported:
///
/// * file: loads from a local file (provided you give your app permission to
/// access that file).
/// * asset: loads from a Flutter asset (not supported on Web).
/// * http(s): loads from an HTTP(S) resource.
///
/// On platforms except for the web, the supplied [headers] will be passed with
/// the HTTP(S) request. Currently headers are not recursively applied to items
/// the HTTP(S) request. Currently headers are not applied recursively.
///
/// If headers are set, just_audio will create a cleartext local HTTP proxy on
/// your device to forward HTTP requests with headers included. ¿nhÄ£¿nh ¿nh¿nw  ¿nx¿n}¿n|  ¿nà¿nû¿nù  ¿n¶¿nØ¿nÆ  ¿n≥¿næ¿nΩ  ¿n–¿n’¿o	¿n÷¿n‚¿n€¿n‰¿n¿nÌ¿nÚ¿nˇ¿n˜¿o   ¿oÄ∫¿o.¿o.   ¿o¿o ¿oÕÉˆ¿oÕ¿r8Çd/// An [AudioSource] representing an HLS stream. The following URI schemes are
/// supported:
///
/// * file: loads from a local file (provided you give your app permission to
/// access that file).
/// * asset: loads from a Flutter asset (not supported on Web).
/// * http(s): loads from an HTTP(S) resource.
///
/// On platforms except for the web, the supplied [headers] will be passed with
/// the HTTP(S) request. Currently headers are not applied recursively.
///
/// If headers are set, just_audio will create a cleartext local HTTP proxy on
/// your device to forward HTTP requests with headers included. ¿rbÄ¢¿rb ¿rb¿rp  ¿rq¿rv¿ru  ¿rÅ¿ró¿rñ  ¿rü¿r®¿rß  ¿r¨¿r∑¿r∂  ¿r…¿rŒ¿s¿rœ¿r€¿r‘¿r›¿rÈ¿rÊ¿rÎ¿r¯¿r¿r˙   ¿sÄπ¿s'¿s'   ¿s¿s	 ¿s≈Ç¿s≈¿t4h/// An [AudioSource] for a period of silence.
///
/// NOTE: This is currently supported on Android only. ¿tˆq¿tˆ ¿tˆ¿u  ¿u¿u¿u  ¿u ¿u3¿u2  	¿uC¿uH¿ue¿uL¿uI¿uN¿u[¿uS¿u] ¿tf5¿t¿t   ¿tf¿tg¿tüS¿tØ¿tØ  ¿t∏¿tÃ¿tÀ  ¿tü¿t†¿ukl¿uä¿uä   ¿uk¿ul ¿u€û ¿u€¿wWÅu/// An [AudioSource] representing a concatenation of multiple audio sources to
/// be played in succession. This can be used to create playlists. Playback
/// between items will be gapless on Android, iOS and macOS, while there will
/// be a slight gap on Web.
///
/// (Untested) Audio sources can be dynamically added, removed and reordered
/// while the audio is playing. ¿wÚÇ{¿yé ¿yé¿y¶ Åè/// Creates a [ConcatenatingAudioSorce] with the specified [children]. If
/// [useLazyPreparation] is `true`, children will be loaded/buffered as late
/// as possible before needed for playback (currently supported on Android,
/// iOS, MacOS). When [AudioPlayer.shuffleModeEnabled] is `true`,
/// [shuffleOrder] will be used to determine the playback order (defaulting to
/// [DefaultShuffleOrder]).¿y≠¿yº¿yª  ¿y…¿yœ¿yŒ  ¿yÌ¿y¸¿y˚  ¿y„¿z¿z¿z-¿z ¿z0¿zC¿zD¿zP¿zR¿zX¿zk¿zY¿z\¿zd¿ze¿wà ¿w†¿w†  ¿w¨¿w∑¿w∑  ¿wÕ ¿w‡¿w‡  ¿êÁF¿ë¿ë!/// The number of [AudioSource]s.   ¿ëkg¿ëî¿ëî   ¿ëk¿ël¿ë÷ÅÀ¿ë¿ë   ¿ë÷¿ë◊ ¿zqÄ´¿zä¿zä  ¿zë¿zû¿zù  ¿zq¿zr¿{ Ç˘¿{1¿{1  ¿{;¿{A¿{@  ¿{ ¿{!¿~ÇC¿~U¿~U(/// (Untested) Appends an [AudioSource]. ¿~Y¿~f¿~e   ¿ÄdÇC¿Äß¿Äß3/// (Untested) Inserts an [AudioSource] at [index]. ¿ÄÆ	¿Ä≥¿Ä≤  ¿Äπ¿Ä∆¿Ä≈   ¿Ç´Ç™¿ÇÍ¿ÇÍ//// (Untested) Appends multiple [AudioSource]s. ¿ÇÒ¿É¿É   ¿ÖYÇ§¿Ö¢¿Ö¢9/// (Untested) Insert multiple [AudioSource]s at [index]. ¿Ö¨	¿Ö±¿Ö∞  ¿Ö∑¿Ö ¿Ö…   ¿àÇK¿àì¿àìÄÄ/// (Untested) Dynamically remove an [AudioSource] at [index] after this
/// [ConcatenatingAudioSource] has already been loaded. ¿àú	¿à°¿à†   ¿äPÇ8¿ä«¿ä«e/// (Untested) Removes a range of [AudioSource]s from index [start] inclusive
/// to [end] exclusive. ¿ä”	¿äÿ¿ä◊  ¿äﬁ¿ä„¿ä‚   ¿ååÇs¿å‰¿å‰H/// (Untested) Moves an [AudioSource] from [currentIndex] to [newIndex]. ¿åÈ¿åÓ¿åÌ  ¿å˚¿ç ¿åˇ   ¿èÅ‡¿è=¿è=*/// (Untested) Removes all [AudioSource]s.   ¿ë16¿ëF¿ëF  ¿ëI	¿ëN¿ëM   ¿ì•Ä˛¿ìƒ¿ìƒ   ¿ì•¿ì¶ ¿îßÉó¿îß¿ïi/// An [AudioSource] that clips the audio of a [UriAudioSource] between a
/// certain start and end time. ¿ïôÅT¿ñL ¿ñL¿ñ_ Ä¨/// Creates an audio source that clips [child] to the range [start]..[end],
/// where [start] and [end] default to the beginning and end of the original
/// [child] source.¿ñf¿ñu¿ñt  ¿ñ
¿ñÖ¿ñÑ  ¿ñè¿ñï¿ñî  ¿ñù¿ñ¶¿ñ•  ¿ñÆ¿ñπ¿ñ∏  	¿ñ…¿ñŒ¿ñÎ¿ñ“¿ñœ¿ñ‘¿ñ·¿ñŸ¿ñ„¿ïJ¿ï_¿ï_  ¿ïh¿ïx¿ïx  ¿ïÅ¿ïë¿ïë    ¿ñÒ¿ó
¿ó
  ¿ó¿ó¿ó  ¿ñÒ¿ñÚ¿ótÄ»¿óì¿óì   ¿ót¿óu ¿ô#Çƒ¿ô#¿ô)  ¿ô}V¿ô} ¿ô}¿ôè  ¿ôñ¿ô•¿ô§  ¿ôØ¿ôæ¿ôΩ  ¿ôÀ¿ô–¿ô—¿ôT¿ô`¿ô`  ¿ôi¿ôs¿ôs  ¿öèÄÅ¿ö∏¿ö∏   ¿öè¿öê¿õK¿õ.¿õ.   ¿õ¿õ ¿ô◊¿ô¿ô  ¿ô˜¿ö¿ö  ¿ô◊¿ôÿ¿öZ1¿ök¿ök  ¿öu¿ö{¿öz  ¿öZ¿ö[¿õcÄÇ¿õÇ¿õÇ   ¿õc¿õd ¿úXÑ¿úX¿ùÄô/// An [AudioSource] that provides audio dynamically. Subclasses must override
/// [request] to provide the encoded audio data. This API is experimental. ¿ùM3¿ùM ¿ùM¿ù^  ¿ù`¿ùi¿ùh  ¿ùp¿ùu¿ù~¿ùy¿ùv¿ù{¿ù@	¿ùE¿ùE    ¿ùÑÅ~¿ùù¿ùù  ¿ù§¿ù±¿ù∞  ¿ùÑ¿ùÖ¿üÅ∞¿†ñ¿†ñÅi/// Used by the player to request a byte range of encoded audio data in small
/// chunks, from byte position [start] inclusive (or from the beginning of the
/// audio data if not specified) to [end] exclusive (or the end of the audio
/// data if not specified). If the returned future completes with an error,
/// a 500 response will be sent back to the player. ¿†ü
¿†•¿†§  ¿†´¿†±¿†∞   ¿†∫Äå¿†Ÿ¿†Ÿ   ¿†∫¿†ª¿úÚ¿úÛ¿°JÑˆ¿°J¿°§E/// The response for a [StreamAudioSource]. This API is experimental. ¿•gÄ◊¿•g ¿•g¿•z  ¿•Å"¿•á¿•Ü  ¿•©¿•∏¿•∑  ¿•…¿•ÿ¿•◊  ¿•Í¿•˘¿•¯  ¿¶¿¶¿¶  ¿¶¿¶-¿¶,  ¿•ü¿°ºÅ=¿¢„¿¢„Å/// Indicates to the client whether or not range requests are supported for
/// the requested media. If `true`, the client may make further requests
/// specifying the `start` and possibly also the `end` parameters of the range
/// request, otherwise these will both be null. ¿¢˛Äí¿£Ñ¿£Ñv/// When responding to a range request, this holds the byte length of the
/// entire media, otherwise it holds `null`. ¿£ïÄƒ¿§L¿§LÄ•/// The number of bytes returned in this response, or `null` if unknown. Note:
/// this may be different from the length of the entire media for a range
/// request. ¿§^o¿§«¿§«Y/// The starting byte position of the response data if responding to a range
/// request. ¿§“:¿•¿•/// The MIME type of the audio. ¿•Q¿•\¿•\0/// The audio content returned by this response.    ¿°ê¿°ë¿¶B±§¿¶B¿ß!Ä /// This is an experimental audio source that caches the audio while it is being
/// downloaded and played. It is not supported on platforms that do not provide
/// access to the file system (e.g. web). ¿®{Ç_¿©Ó ¿©Ó¿™ Åf/// Creates a [LockCachingAudioSource] to that provides [uri] to the player
/// while simultaneously caching it to [cacheFile]. If no cache file is
/// supplied, just_audio will allocate a cache file internally.
///
/// If headers are set, just_audio will create a cleartext local HTTP proxy on
/// your device to forward HTTP requests with headers included.¿™
¿™¿™  ¿™¿™ ¿™  ¿™,¿™3¿™2  ¿™A¿™J¿™I  ¿™`¿™V¿™Ä¿™ö¿™x¿™n¿™{¿™Ç¿™à¿™â¿™é¿™ò¿™è¿™ú¿™©¿™≠¿™™¿™∏¿™Ω¿™∆¿™¡¿™æ¿™√¿ßV%¿ßr¿ßr  ¿ß¿ßâ¿ßâ  ¿ßê"¿ß´¿ß´  ¿ß∂¿ß…¿ß…  ¿ß÷¿ß⁄¿ß⁄ ¿ßÊ¿ßÎ0¿ßÒ¿ßÒ ¿®¿®¿ß˝¿®¿ß˛¿®:¿®%¿®% ¿®@¿®O¿®V¿®P¿®W¿®X¿®]¿®b¿®b ¿®q¿¨úÄ…¿≠+¿≠+w/// Emits the current download progress as a double value from 0.0 (nothing
/// downloaded) to 1.0 (download complete).   ¿∞ÕY¿∞ﬁ¿∞ﬁ    ¿±*ÅÉ¿≤s¿≤sÅ//// We use this to record the original content type of the downloaded audio.
/// NOTE: We could instead rely on the cache file extension, but the original
/// URL might not provide a correct extension. As a fallback, we could map the
/// MIME type to an extension but we will need a complete dictionary.    ¿™ﬁÄñ¿™Î¿™Î    ¿´xÅ ¿¨¿¨{/// Returns a [UriAudioSource] resolving directly to the cache file if it
/// exists, otherwise returns `this`. This can be   ¿≠iÇ5¿≠È¿≠Èn/// Removes the underlying cache files. It is an error to clear the cache
/// while a download is in progress.   ¿Ø¢Å'¿ØÌ¿ØÌ4/// Get file for caching [uri] with proper extension ¿Ø˚¿∞¿∞   ¿≤±ÄÃ¿≤¿¿≤¿    ¿≥Åûˇ¿∂1¿∂1Ç~/// Start downloading the whole audio file to the cache and fulfill byte-range
/// requests during the download. There are 3 scenarios:
///
/// 1. If the byte range request falls entirely within the cache region, it is
/// fulfilled from the cache.
/// 2. If the byte range request overlaps the cached region, the first part is
/// fulfilled from the cache, and the region beyond the cache is fulfilled
/// from a memory buffer of the downloaded data.
/// 3. If the byte range request is entirely outside the cached region, a
/// separate HTTP request is made to fulfill it while the download of the
/// entire file continues in parallel.   ¿“ÑÖ`¿“¨¿“¨  ¿“µ
¿“ª¿“∫  ¿“¡¿“«¿“∆  ¿“Ñ¿“Ö¿ß¿ß¿◊ËÉ¿◊Ë¿ŸîÅ•/// When a byte range request on a [LockCachingAudioSource] overlaps partially
/// with the cache file and partially with the live HTTP stream, the consumer
/// needs to first consume the cached part before the live part. This class
/// provides a place to buffer the live part until the consumer reaches it, and
/// also keeps track of the [end] of the byte range so that the producer knows
/// when to stop adding data. ¿€.7¿€. ¿€.¿€F  ¿€M¿€\¿€[   ¿⁄Î-¿⁄Ò¿⁄Ò 	¿⁄˛¿€¿€¿€¿€¿€¿€¿€¿€¿€¿€'¿€'      ¿€iÉ~¿€i¿€°1/// Request parameters for a [StreamAudioSource]. ¿‹ö1¿‹ö ¿‹ö¿‹¥  ¿‹µ
¿‹ª¿‹∫  ¿‹¡¿‹«¿‹∆   ¿€¿6¿€Ò¿€Ò#/// The start of the range request. ¿€˚2¿‹*¿‹*!/// The end of the range request. ¿‹2c¿‹h¿‹h-/// Completes when the response is available.¿‹u¿‹~¿‹í¿‹¿‹ì¿‹î¿‹œa¿›¿›"/// The response for this request.    ¿›4Ä¬¿›q¿›q5/// Completes this request with the given [response]. ¿›z¿›è¿›é   ¿›˙ÄÎ¿ﬁA¿ﬁA?/// Fails this request with the given [error] and [stackTrace]. ¿ﬁF¿ﬁO¿ﬁN  ¿ﬁV¿ﬁc¿ﬁb    ¿˙ÉŸ¿˙¿˚íÄí/// Defines the algorithm for shuffling the order of a
/// [ConcatenatingAudioSource]. See [DefaultShuffleOrder] for a default
/// implementation.   ¿˚£Ä´¿¸F¿¸FÄê/// The shuffled list of indices of [AudioSource]s to play. For example,
/// [2,0,1] specifies to play the 3rd, then the 1st, then the 2nd item.    ¿¸RÅP¿˝Ö¿˝ÖÅ%/// Shuffles the [indices]. If the current item in the player falls within the
/// [ConcatenatingAudioSource] being shuffled, [initialIndex] will point to
/// that item. Subclasses may use this information as a hint, for example, to
/// make [initialIndex] the first item in the shuffle order. ¿˝é¿˝î¿˝ì   ¿˝¶Äë¿˛¿˛j/// Inserts [count] new consecutive indices starting from [index] into
/// [indices], at random positions. ¿˛!	¿˛&¿˛%  ¿˛,	¿˛1¿˛0   ¿˛;`¿˛{¿˛{8/// Removes the indices that are `>= start` and `< end`. ¿˛á	¿˛å¿˛ã  ¿˛í¿˛ó¿˛ñ   ¿˛ü(¿˛ø¿˛ø/// Removes all indices.    ¿˛ÀÜ‹¿˛À¿ˇUÄÉ/// The default implementation of [ShuffleOrder] which shuffles items with the
/// currently playing item at the head of the order. ¿ˇ¬E¿ˇ¬ ¿ˇ¬¿ˇ’  ¿ˇ◊¿ˇ‡¿ˇﬂ  ¿ˇÚ¿ˇÍ¿ˇ˚¿ˇÙ¿ˇ˛¿ ¿ ¿ˇÇ¿ˇè¿ˇè  ¿ˇö#¿ˇ¨¿ˇ¨ ¿ˇö¿ˇõ¿ˇª¿ˇº¿ˇ∂¿ˇ∫¿ˇ∑  ¿ Å÷¿ ¿   ¿ %¿ +¿ *  ¿ ¿ ¿ÂÅ˚¿ˆ¿ˆ  ¿˝	¿¿  ¿	¿¿  ¿Â¿Ê¿‰Åä¿ı¿ı  ¿	¿¿  ¿¿¿  ¿‰¿Â¿r3¿É¿É   ¿r¿s ¿ïó¢¿ï¿ÄÄ/// The stand-in platform implementation to use when the player is in the idle
/// state and the native platform is deallocated. ¿FÄø¿F ¿F¿V  ¿]¿n¿m  ¿u9¿°¿†  ¿∑¿º¿ø¿Ω¿M=¿S¿S ¿c¿r¿á¿s¿à¿â¿é¿ú¿ú  ¿©¿Æ¿Æ  ¿∏#¿“¿“  ¿‡a¿!¿!/// Holds a pending request. ¿Xf¿Ö¿Ö   ¿X¿Y ¿		Åú¿	¿	    ¿
©Ä´¿
≥¿
≥  ¿
«
¿
Õ¿
Ã   ¿¬Å¿„¿„  ¿Ë¿ı¿Ù  ¿¬¿√¿Õa¿Ó¿Ó  ¿Û¿ ¿ˇ  ¿Õ¿Œ¿2e¿T¿T  ¿Z¿h¿g  ¿2¿3¿õu¿¡¿¡  ¿À¿›¿‹  ¿õ¿ú¿q¿9¿9  ¿B¿S¿R  ¿¿¿âq¿Æ¿Æ  ¿∑¿»¿«  ¿â¿ä¿˛Äê¿)¿)  ¿?¿V¿U  ¿˛¿ˇ¿í}¿∫¿∫  ¿∆¿⁄¿Ÿ  ¿í¿ì¿Äê¿>¿>  ¿T¿k¿j  ¿¿¿ßÄî¿”¿”  ¿Í¿¿  ¿ß¿®¿?Äú¿m¿m  ¿Ü ¿†¿ü  ¿?¿@¿ﬂÄÅ¿¿  ¿¿*¿)  ¿ﬂ¿‡¿dÄ˛¿Æ¿Æ  ¿·6¿¿  ¿d¿e¿fÅ@¿Ω¿Ω  ¿˝Q¿H¿G  ¿f¿g¿™Ä¥¿ﬁ¿ﬁ  ¿˝&¿¿  ¿™¿´¿bÄŸ¿É¿É  ¿à¿ï¿î  ¿b¿c¿?ÄÏ¿u¿u  ¿ñ(¿∏¿∑  ¿?¿@¿/m¿S¿S  ¿[¿k¿j  ¿/¿0¿†Ä∞¿”¿”  ¿Ò%¿¿  ¿†¿°¿TÄ∏¿â¿â  ¿©'¿ ¿…  ¿T¿U¿Äú¿>¿>  ¿W ¿q¿p  ¿¿¿∞Ä¨¿‚¿‚  ¿ˇ$¿¿  ¿∞¿±¿`ÄÚ¿ß¿ß  ¿◊3¿¿  ¿`¿a¿VÄƒ¿é¿é  ¿±*¿’¿‘  ¿V¿W¿ÅW¿X¿X  ¿},¿£¿¢  ¿¿¿yÄº¿Ø¿Ø  ¿–(¿Ú¿Ò  ¿y¿z ¿9ÄÍ¿9¿óW/// Holds the initial requested position and index for a newly loaded audio
/// source. ¿ﬂB¿ﬂ ¿ﬂ¿Ò  ¿Û¿¿  ¿¿¿   ¿Æ¿æ¿æ  ¿ ¿’¿’      ¿%ÉM¿%¿+  ¿®ÅÊ¿® ¿®¿µ  ¿º-¿◊¿÷  ¿Ô+¿ 	¿   2¿ $¿ *¿ ñ¿ G¿ ?¿ +¿ B¿ y¿ V¿ i¿ j¿ o¿ p¿ q¿ r¿ |¿ è¿ ê¿ °¿ ß¿!¿ √¿ ª¿ ®¿ æ¿ Ù¿ “¿ ‰¿ Â¿ Í¿ Î¿ Ï¿ Ì¿ ˜¿!	¿!
¿!/¿!¿!E¿!1¿!H¿!N¿!O¿!m¿!Z¿!Ç¿!o¿!Ö¿!ã¿!å¿=2¿\¿\  ¿s0¿ë¿ë  ¿!íj¿!®¿!®     ¿" p¿"¿"  ¿"¿"¿"    ¿"tÜ√¿"t¿$=Åπ/// Subclasses of [AudioEffect] can be inserted into an [AudioPipeline] to
/// modify the audio signal outputted by an [AudioPlayer]. The same audio effect
/// instance cannot be set on multiple players at the same time.
///
/// An [AudioEffect] is disabled by default. For an [AudioEffect] to take
/// effect, in addition to being part of an [AudioPipeline] attached to an
/// [AudioPlayer] you must also enable the effect via [setEnabled]. ¿$ü¿$ü ¿$ü¿$™    ¿$M¿$Z¿$Z  ¿$e5¿$k¿$k ¿$}¿$å¿$ç¿$ì¿$ô¿$î¿%ÃÅg¿'¿'Å2/// Whether the effect is enabled. When `true`, and if the effect is part
/// of an [AudioPipeline] attached to an [AudioPlayer], the effect will modify
/// the audio player's output. When `false`, the audio pipeline will still
/// reserve platform resources for the effect but the effect will be bypassed.   ¿'7h¿'w¿'w,/// A stream of the current [enabled] value.   ¿'£.¿'¨¿'¨    ¿'’¿'‡¿'‡     ¿$±Äú¿$˙¿$˙A/// Called when an [AudioEffect] is attached to an [AudioPlayer]. ¿%¿%¿%   ¿%Qw¿%ò¿%ò7/// Called when [_player] is connected to the platform. ¿%¢¿%∑¿%∂   ¿'ÍÅ'¿(,¿(,2/// Set the [enabled] status of this audio effect. ¿(7¿(=¿(<   ¿) ¿)(¿)(     ¿)ÓÉı¿)Ó¿*ju/// An Android [AudioEffect] that boosts the volume of the audio signal to a
/// target gain, which defaults to zero.  ¿*≤6¿*∏¿*∏ ¿*Õ¿*‹¿*›¿*„¿*Á¿*‰¿*Ì:¿+¿+   ¿*Ì¿*Ó¿++W¿+Y¿+Y /// The target gain in decibels.   ¿+Üx¿+–¿+–4/// A stream of the current target gain in decibels.    ¿,ÅJ¿,B¿,B0/// Sets the target gain to a value in decibels. ¿,P¿,X¿,W   ¿-PÄë¿-o¿-o   ¿-P¿-Q ¿-Âás¿-Â¿.2/// A frequency band within an [AndroidEqualizer]. ¿/ÂÅ¿/Â¿/˘¿/˙¿/˚¿/˙ ¿0¿0¿0  ¿0#¿02¿01  ¿0<¿0K¿0J  ¿0^¿0m¿0l  ¿0Ä¿0è¿0é  ¿0£¿0¥¿0≥  ¿0»¿0¿¿0 ¿.7¿.I¿.I  ¿.Ud¿.¥¿.¥R/// A zero-based index of the position of this band within its [AndroidEqualizer]. ¿.æL¿.¸¿.¸./// The lower frequency of this band in hertz. ¿/L¿/M¿/M./// The upper frequency of this band in hertz. ¿/`N¿/ü¿/ü//// The center frequency of this band in hertz. ¿/≤.¿/∏¿/∏ ¿/«¿/÷¿/›¿/◊¿/ﬁ¿/ﬂ¿0ˆR¿1+¿1+'/// The gain for this band in decibels.   ¿1Ls¿1ù¿1ù;/// A stream of the current gain for this band in decibels.    ¿1√Å)¿1ˇ¿1ˇ,/// Sets the gain for this band in decibels. ¿2¿2¿2   ¿2ÄË¿3)¿3))/// Restores the gain after reactivating. ¿32¿3G¿3F   ¿3‹Åz¿3¯¿3¯  ¿4¿4¿4  ¿4$#¿4A¿4@    ¿5ZÑ/¿5Z¿5ì2/// The parameter values of an [AndroidEqualizer]. ¿6µy¿6µ ¿6µ¿6œ  ¿6÷¿6Â¿6‰  ¿6ı¿7¿7  ¿7¿7#¿7"   ¿5≤Q¿5¯¿5¯6/// The minimum gain value supported by the equalizer. ¿6Q¿6N¿6N6/// The maximum gain value supported by the equalizer. ¿6^R¿6´¿6´)/// The frequency bands of the equalizer.   ¿72Äπ¿7p¿7p./// Restore platform state after reactivating. ¿7y¿7é¿7ç   ¿7ÔÅò¿8¿8  ¿8)¿86¿85  ¿8=)¿8`¿8_    ¿9ãÑ√¿9ã¿:/// An [AudioEffect] for Android that can adjust the gain for different
/// frequency bands of an [AudioPlayer]'s audio signal.  ¿:Rp¿:~¿:~ ¿:õ¿:§¿:ø¿:•¿:¿¿:¡¿:«3¿:ﬁ¿:ﬁ   ¿:«¿:»¿= ÄÖ¿=U¿=U+/// The parameter values of this equalizer.    ¿:˛Å˛¿;¿;  ¿;!¿;6¿;5  ¿:˛¿:ˇ¿=âÄ√¿=®¿=®   ¿=â¿=ä ¿?Å¡¿?¿@6?/// Information collected when a position discontinuity occurs. ¿AfI¿Al ¿Al¿AÅ  ¿AÇ¿Aà¿Aá  ¿Aè¿Aï¿Aî  ¿A£
¿A©¿A®   ¿@PY¿@£¿@£./// The reason for the position discontinuity. ¿@Æ]¿@˛¿@˛9/// The previous event before the position discontinuity. ¿AQ¿A\¿A\5/// The event that caused the position discontinuity.      ¿äÅú¿ä¿À;/// Enumerates the different processing states of a player.  ¿ﬂ6¿¿//// The player has not loaded an [AudioSource]. ¿5¿H¿H+/// The player is loading an [AudioSource]. ¿TA¿å¿å5/// The player is buffering audio and unable to play. ¿öH¿›¿›@/// The player is has enough audio buffered and is able to play. ¿Á<¿	¿	0/// The player has reached the end of the audio.     ¿©l¿©¿˚L/// An enumeration of modes that can be passed to [AudioPlayer.setLoopMode].  ¿¿¿  ¿¿¿  ¿¿¿      ¿|¿¿gJ/// Possible values that can be passed to [AudioPlayer.setWebCrossOrigin].  ¿x	¿x¿x  ¿É¿É¿É      ¿A≥Å/¿A≥¿AÊ-/// The reasons for position discontinuities.  ¿B>¿B@¿B@7/// The position discontinuity was initiated by a seek. ¿BIÄñ¿B‘¿B‘ÄÜ/// The position discontinuity occurred because the player reached the end of
/// the current item and auto-advanced to the next item.     ¿?Ä”¿?¿?a;/// Backwards compatible extensions on rxdart's ValueStream¿?w¿?w¿?w  ¿?ê\¿? ¿? 0/// Backwards compatible version of valueOrNull.       ÇdÇ¿ÇdÇz     	¿õÈm¿õÈ¿õÌ  ¿õ¸¿ú¿ú  ¿ú¿ú¿ú   ¿ﬂèà9¿ﬂè¿ﬂﬂA/// A proxy handler for serving audio from a [StreamAudioSource]. ¿ﬂˆ¿‡	¿‡   ¿Á í®¿Á ¿Ë G/// A proxy handler for serving audio from a URI with optional headers. ¿Ë7¿Ë<¿Ë;  ¿ËD¿ËZ¿ËY  ¿Ëd¿Ëm¿Ël   ¿˙tz¿˙t¿˙Ü    ¿>P3¿>P¿>U    ¿>ÑD¿>Ñ¿>â    ¿>…P¿>…¿>Œ    ¿B‰Ç∫¿B‰¿B˛  ¿C¿C¿C  ¿C¿C¿C  ¿C'¿C=¿C<   ¿E†Ä¶¿E†¿E´  ¿Eæ¿E«¿E∆    ¿ﬁÈÄ§¿ﬁÈ¿ﬂ<J/// The type of functions that can handle HTTP requests sent to the proxy.  ¿ﬂ_¿ﬂq¿ﬂp  ¿ﬂx¿ﬂÖ¿ﬂÑ   ¿)9V¿)9¿)k+/// An [AudioEffect] that supports Android.       ¿)ë[¿)ë¿)…1/// An [AudioEffect] that supports iOS and macOS.       Ç#Ç)Ç) Ç1Ç5Ç6Ç:'ÇMÇM    èÚ ,>RSÄÜÄ´Ä’Ä˝ÅPÅÉÅ©Å‹ÇÇ"Ç#Ç9Ç:ÇcÇdÇåÇøÉÉ$ÉJÉöÉÍÑ1Ñ;ÑÑëÑ’Ñ€ÖÖ
Ö#Ö%Ö&ÖsÖwÖÖ°Ö’ÖËÜÜVÜoÜ£Ü–Ü„Ü˝áá!á%áoá™áæáàààLàuàvàØà∞àﬂà‡â/âÄâ‘âÏâÌä1äRäÄäÅä¬äÈäÍã9ãbãíãìãﬂåå'å(ålåºçç6ç~çç»éédéíé‘é’èè.èkèπè∫èŒèÛêêEê_êâêØê∞ê‚ë.ëTëçë”ííBíwí¨íì0ìoì≠ìˆî6î\îûî·ï"ïfïßïœññ ñ9ñhñùñ‡óó,óMónó°óƒóﬁò	ò5ò6òròéòèòØòµôôNôúô›ô„ö0öÄöøõõ\õ™õ¯úEúíú€ùùùdù¥ùÚû?ûçûﬁü/üiü©üŸüﬂ†-†[†k†Ç†ß†‘°°6°X°ä°µ°œ°Ô¢¢O¢ï¢œ£
£V£ó£∏£ˆ§=§Å§á§∂§••3•|•∑•Á•˚¶D¶z¶•¶πßß5ßTßrßèß´ßı®)®v®∑®˙©	©U©f©ï©ƒ©Ú™™\™Ñ™∆™Ê´$´6´@´Å´ƒ´Ã´˚¨2¨^¨r¨ª¨˚≠0≠D≠ç≠ﬁÆÆ/ÆKÆeÆÖÆõÆÍØØFØbØ±ØœØ„Ø˚∞∞3∞G∞R∞[∞¨∞œ±±+±P±°±π≤≤1≤Y≤Ñ≤µ≤’≥≥O≥Å≥–¥¥?¥k¥É¥≥¥Ω¥√¥‚µµ9µsµÜµíµªµ¯∂∂7∂f∂å∂…∂˜∑ ∑2∑\∑s∑£∑’∑Ù∏∏_∏ñ∏¡∏”∏Í∏¯ππ-π\πÇπ≥π›πÙ∫$∫R∫|∫ì∫≈∫Ôªªª ª,ª6ª<ª[ª_ª`ª≠ªıºEºîº´º‹ºÙº˛Ω/Ω{Ω¶Ω¥ΩÏææ#æ`æjæræÑæ¿æ∆æ æÀæ˚ø+ø,øNøÉøÑø®ø˘ø˙¿ @8¿ @m¿ @n¿ @¨¿ @Ë¿ @È¿ A¿ AU¿ AV¿ A{¿ Aƒ¿ A≈¿ AÎ¿ B"¿ BH¿ BI¿ Bn¿ Bù¿ Bû¿ BÀ¿ C¿ C¿ C0¿ C_¿ C`¿ CÑ¿ C¿¿ C¡¿ CË¿ D¿ D¿ D>¿ Dx¿ Dy¿ Dß¿ D‘¿ D’¿ E¿ E>¿ E?¿ Ez¿ Eø¿ E¿¿ E¸¿ F+¿ FT¿ FU¿ Fë¿ F¥¿ FÏ¿ FÌ¿ G¿ GD¿ Gk¿ Gl¿ GΩ¿ G⁄¿ H¿ H¿ H[¿ Hß¿ H®¿ HÚ¿ I ¿ I!¿ Io¿ Ip¿ Ií¿ I›¿ Iﬁ¿ J)¿ J>¿ JÉ¿ JÑ¿ Jœ¿ K	¿ K(¿ K)¿ Kw¿ Kí¿ K‘¿ K’¿ L ¿ L/¿ L¿ LÄ¿ L∑¿ LÔ¿ L¿ MA¿ Mz¿ M≤¿ M≥¿ M·¿ N'¿ N(¿ Nn¿ Né¿ N“¿ N”¿ O¿ O@¿ Od¿ Oe¿ O¢¿ OÀ¿ OÃ¿ P
¿ P;¿ P<¿ Pà¿ Pÿ¿ PÓ¿ Q¿ QS¿ Qq¿ Qä¿ Qø¿ Q√¿ Qƒ¿ QÏ¿ R-¿ RK¿ Rh¿ Rù¿ R°¿ R¢¿ RÔ¿ R˚¿ S)¿ S*¿ Sw¿ Så¿ Sø¿ S¿¿ SÁ¿ T*¿ Ta¿ Tï¿ T‡¿ U¿ UY¿ Uê¿ Uµ¿ Uˆ¿ V¿ VJ¿ VY¿ Vn¿ Vv¿ V|¿ V¨¿ Vø¿ V√¿ Vƒ¿ V·¿ W¿ W¿ W6¿ Wx¿ Wy¿ W™¿ WÔ¿ W¿ X¿ XJ¿ Xs¿ Xt¿ X¥¿ X˛¿ Xˇ¿ YJ¿ Y|¿ Y®¿ Y©¿ Y„¿ Z&¿ ZR¿ ZS¿ Zú¿ ZŒ¿ [¿ [.¿ [/¿ [¿ [ê¿ [–¿ \
¿ \¿ \c¿ \ü¿ \†¿ \Ï¿ \˘¿ ]7¿ ]8¿ ]à¿ ]ü¿ ]ÿ¿ ]Ÿ¿ ^*¿ ^P¿ ^Q¿ ^{¿ ^∑¿ ^∏¿ ^Ú¿ _1¿ _e¿ _Æ¿ _ˇ¿ `¿ `7¿ `D¿ `o¿ `u¿ `y¿ `z¿ `ƒ¿ a¿ aZ¿ a®¿ aÙ¿ b*¿ b0¿ b~¿ b¶¿ b ¿ c ¿ c¿ cR¿ cj¿ c£¿ cﬂ¿ cÁ¿ cÌ¿ d¿ d¿ d¿ de¿ d±¿ d˘¿ eG¿ eó¿ e∞¿ e∂¿ f¿ fR¿ få¿ f∂¿ fÀ¿ g¿ gC¿ gJ¿ gn¿ gï¿ g‘¿ h¿ h¿ h=¿ hS¿ hv¿ hû¿ h∆¿ h÷¿ h‹¿ h›¿ hˆ¿ i/¿ iq¿ ió¿ i’¿ iÌ¿ j¿ jB¿ jf¿ jù¿ jª¿ j≈¿ j’¿ j›¿ jÚ¿ k¿ k¿ k"¿ k#¿ ka¿ k¿ kª¿ kÚ¿ l7¿ lW¿ lé¿ l∑¿ lª¿ lº¿ m¿ mV¿ mß¿ mÈ¿ mÔ¿ n¿ n¿ n¿ nn¿ n®¿ n≤¿ n∏¿ n˛¿ o¿ o,¿ oN¿ om¿ oÜ¿ oó¿ oü¿ oµ¿ o¸¿ p(¿ pE¿ pF¿ pè¿ pÀ¿ p—¿ pÓ¿ pÙ¿ p˛¿ qB¿ q|¿ qÜ¿ qå¿ q“¿ qÛ¿ r
¿ r)¿ rB¿ rS¿ r[¿ rñ¿ r’¿ r÷¿ s!¿ s]¿ sc¿ s§¿ s™¿ s¥¿ t¿ t@¿ tJ¿ tP¿ tõ¿ t÷¿ t‹¿ u"¿ u@¿ uX¿ um¿ uÜ¿ u•¿ u∂¿ uæ¿ u‘¿ v¿ v@¿ vZ¿ vc¿ vd¿ v´¿ v±¿ vˇ¿ wK¿ wú¿ wÈ¿ x9¿ xá¿ x“¿ xÿ¿ y$¿ yt¿ yã¿ yë¿ y»¿ yŒ¿ z¿ zU¿ z§¿ zÚ¿ {¿ {,¿ {F¿ {_¿ {v¿ {ï¿ {¢¿ {¬¿ {€¿ {Ù¿ |@¿ |~¿ |ß¿ |„¿ |˛¿ }¿ }0¿ }Q¿ }d¿ }É¿ }ê¿ }ﬁ¿ }‰¿ }˘¿ }˝¿ }˛¿ ~N¿ ~É¿ ~â¿ ~£¿ ~©¿ ~È¿ 0¿ ¿ Õ¿ Ë¿ Ä¿ Ä+¿ ÄK¿ Äâ¿ Äè¿ Ä¢¿ Ä÷¿ Ä˜¿ Å0¿ Åa¿ Ån¿ Å´¿ Åÿ¿ Åﬁ¿ Å‚¿ Å„¿ Ç¿ ÇL¿ Çu¿ Çß¿ Çƒ¿ Ç»¿ Ç…¿ ÇÍ¿ É(¿ Éf¿ É¢¿ É»¿ Ñ¿ ÑG¿ Ñh¿ Ñµ¿ Ñª¿ Ñ¿ Ö"¿ Ö(¿ Ö,¿ Ö-¿ Ö_¿ Öá¿ Öã¿ Öå¿ Öÿ¿ Ü¿ Ü>¿ Ü]¿ Üè¿ Ü◊¿ á'¿ á/¿ á5¿ á6¿ á@¿ áa¿ á|¿ á¿¿ á‹¿ á˝¿ à¿ àO¿ àâ¿ àΩ¿ à ¿ à¸¿ â*¿ âE¿ âk¿ âì¿ â€¿ ä+¿ ä3¿ ä\¿ ä~¿ ä¬¿ ä›¿ äÙ¿ ã¿ ã'¿ ãc¿ ã∞¿ ã◊¿ ã¯¿ å/¿ å@¿ åu¿ å¿ åá¿ åç¿ åë¿ åí¿ å◊¿ ç"¿ çq¿ çπ¿ ç›¿ ç˙¿ é7¿ éW¿ éú¿ éæ¿ é◊¿ é¸¿ è¿ è;¿ èr¿ èê¿ è™¿ èƒ¿ è÷¿ èÎ¿ èÔ¿ è¿ êA¿ êé¿ ê‹¿ ë-¿ ëz¿ ëó¿ ëù¿ ëË¿ í8¿ íÖ¿ í“¿ ì¿ ìi¿ ìà¿ ìé¿ ìŸ¿ î ¿ î>¿ îY¿ îr¿ îê¿ î€¿ ï*¿ ïE¿ ïs¿ ïì¿ ïµ¿ ïº¿ ï€¿ ñ
¿ ñ:¿ ñp¿ ñ¿¿ ñ‹¿ ó&¿ ói¿ óõ¿ ó∂¿ óÕ¿ ò¿ òk¿ òº¿ ô¿ ôA¿ ôR¿ ô†¿ ôÎ¿ ö,¿ öc¿ öm¿ öu¿ öÇ¿ öº¿ öﬁ¿ ö‰¿ õ¿ õ¿ õ	¿ õO¿ õa¿ õÄ¿ õõ¿ õµ¿ õ’¿ õÛ¿ ú;¿ úi¿ úâ¿ ú´¿ ú≤¿ ú“¿ ù¿ ùL¿ ùo¿ ù¢¿ ù¶¿ ùß¿ ù»¿ û¿ û¿ ûG¿ ûq¿ ûí¿ û∞¿ û„¿ ûÈ¿ ûÌ¿ ûÓ¿ ü8¿ üÖ¿ ü ¿ ü–¿ †¿ †k¿ †ª¿ °¿ °!¿ °<¿ °O¿ °ô¿ °ö¿ °∏¿ ¢ ¿ ¢ ¿ ¢2¿ ¢6¿ ¢7¿ ¢y¿ ¢Ø¿ ¢ ¿ ¢Í¿ £3¿ £7¿ £8¿ £É¿ £ò¿ £”¿ £Ó¿ § ¿ §N¿ §{¿ §Ö¿ §£¿ §Á¿ §˘¿ •2¿ •A¿ •G¿ •K¿ •L¿ •ò¿ •Ê¿ ¶3¿ ¶@¿ ¶t¿ ¶è¿ ¶Ω¿ ¶›¿ ¶ˇ¿ ß¿ ß5¿ ßS¿ ßò¿ ßú¿ ßù¿ ß”¿ ®¿ ®"¿ ®P¿ ®p¿ ®í¿ ®ô¿ ®»¿ ®Ê¿ ©+¿ ©/¿ ©0¿ ©Å¿ ©∫¿ ©Ï¿ ™¿ ™'¿ ™P¿ ™õ¿ ™ü¿ ™†¿ ™Ã¿ ´¿ ´"¿ ´O¿ ´ë¿ ´¶¿ ´¿ ´Ù¿ ´ı¿ ¨D¿ ¨å¿ ¨≠¿ ¨Œ¿ ¨È¿ ≠¿ ≠G¿ ≠d¿ ≠ë¿ ≠‚¿ ≠Ê¿ ≠Á¿ ÆL¿ Æs¿ Æ´¿ ÆÍ¿ Ø¿ Ø1¿ Ø_¿ Ø§¿ Ø‹¿ ∞¿ ∞¿ ∞¿ ∞i¿ ∞Ç¿ ∞«¿ ±¿ ±.¿ ±g¿ ±¢¿ ±æ¿ ±˝¿ ≤F¿ ≤î¿ ≤ò¿ ≤ô¿ ≤Ÿ¿ ≥¿ ≥2¿ ≥M¿ ≥¿ ≥¥¿ ≥¸¿ ¥ ¿ ¥¿ ¥D¿ ¥n¿ ¥ü¿ ¥∫¿ ¥¿ µ'¿ µQ¿ µè¿ µì¿ µî¿ µŸ¿ ∂)¿ ∂v¿ ∂ù¿ ∂£¿ ∂·¿ ∑%¿ ∑@¿ ∑_¿ ∑~¿ ∑¢¿ ∑≤¿ ∑¡¿ ∑œ¿ ∑Í¿ ∏¿ ∏U¿ ∏{¿ ∏£¿ ∏∞¿ ∏Â¿ π(¿ πX¿ πy¿ πô¿ πª¿ πˇ¿ ∫¿ ∫/¿ ∫9¿ ∫?¿ ∫C¿ ∫D¿ ∫ã¿ ∫Ø¿ ∫¬¿ ∫ı¿ ∫˚¿ ∫ˇ¿ ª ¿ ªO¿ ªw¿ ªé¿ ª≈¿ ªÀ¿ ªœ¿ ª–¿ º¿ ºo¿ ºô¿ ºœ¿ ºÍ¿ Ω¿ ΩW¿ ΩÜ¿ Ω÷¿ Ω⁄¿ Ω€¿ æ+¿ æa¿ æí¿ æ·¿ ø¿ øE¿ øs¿ øw¿ øx¿ øƒ¿ øÊ¿ ¿]¿ ¿c¿ ¿≤¿ ¿˝¿ ¡I¿ ¡ñ¿ ¡‰¿ ¡˜¿ ¬@¿ ¬[¿ ¬Ü¿ ¬á¿ ¬∂¿ ¬÷¿ √¿ √¿ √^¿ √e¿ √ã¿ √è¿ √ê¿ √ø¿ √ı¿ ƒ¿ ƒ;¿ ƒ<¿ ƒX¿ ƒó¿ ƒ≥¿ ƒ∑¿ ƒ∏¿ ≈¿ ≈0¿ ≈Q¿ ≈l¿ ≈Ç¿ ≈•¿ ≈€¿ ≈˘¿ ≈ˇ¿ ∆ ¿ ∆N¿ ∆j¿ ∆p¿ ∆â¿ ∆≥¿ ∆«¿ ∆Õ¿ ∆Ë¿ ∆˚¿ «¿ «C¿ «q¿ «î¿ «∂¿ «◊¿ «¯¿ »¿ »F¿ »¿ »¥¿ »Ë¿ »Ï¿ »Ì¿ …=¿ …å¿ …÷¿ …Á¿ …Ì¿  ;¿  I¿  ~¿  º¿  ‹¿ À¿ À:¿ À;¿ Ài¿ Àù¿ ÀÍ¿ Ã6¿ ÃÖ¿ Ã√¿ Ãﬁ¿ Ãﬂ¿ Õ,¿ Õv¿ Õß¿ Õÿ¿ ÕŸ¿ Œ¿ ŒJ¿ ŒK¿ ŒÅ¿ ŒÇ¿ Œ–¿ Œ˝¿ œK¿ œã¿ œí¿ œ„¿ –¿ –=¿ –W¿ –Ç¿ –Æ¿ –Œ¿ –˘¿ —	¿ —U¿ —¿ —é¿ —î¿ —ï¿ —‚¿ “¿ “¿ “;¿ “g¿ “ç¿ “é¿ “…¿ “È¿ ”'¿ ”l¿ ”ù¿ ”ß¿ ”Õ¿ ”¸¿ ‘¿ ‘+¿ ‘X¿ ‘b¿ ‘á¿ ‘¥¿ ‘æ¿ ‘Ê¿ ’0¿ ’:¿ ’e¿ ’ä¿ ’Œ¿ ’ÿ¿ ’‚¿ ÷¿ ÷F¿ ÷o¿ ÷©¿ ÷ˆ¿ ◊¿ ◊J¿ ◊]¿ ◊è¿ ◊õ¿ ◊•¿ ◊≈¿ ÿ¿ ÿ/¿ ÿ9¿ ÿf¿ ÿ∑¿ ÿ”¿ ÿˇ¿ Ÿ'¿ Ÿn¿ Ÿò¿ Ÿ ¿ ⁄ ¿ ⁄¿ ⁄Q¿ ⁄f¿ ⁄¶¿ ⁄≈¿ €¿ €¿ €P¿ €¿ €ë¿ €õ¿ €‹¿ ‹¿ ‹¿ ‹O¿ ‹í¿ ‹¿¿ ‹Ù¿ ›:¿ ›Ü¿ ›ê¿ ›√¿ ›…¿ › ¿ ﬁ ¿ ﬁ,¿ ﬁU¿ ﬁi¿ ﬁñ¿ ﬁ∆¿ ﬁı¿ ﬁˇ¿ ﬂ¿ ﬂ.¿ ﬂ¿ ﬂ∫¿ ﬂÿ¿ ‡¿ ‡6¿ ‡É¿ ‡∆¿ ‡˝¿ ·C¿ ·c¿ ·{¿ ·º¿ ·Ú¿ ‚8¿ ‚X¿ ‚p¿ ‚¡¿ ‚—¿ ‚Ó¿ „8¿ „h¿ „i¿ „ä¿ „ã¿ „ü¿ „¬¿ ‰¿ ‰6¿ ‰l¿ ‰z¿ ‰Ñ¿ ‰Ö¿ ‰∫¿ ‰Ò¿ Â¿ Âb¿ Â°¿ ÂŒ¿ Â¸¿ Ê:¿ Êp¿ Êò¿ Ê‹¿ ÊË¿ Á¿ ÁO¿ ÁÑ¿ Á∫¿ Á∆¿ Á–¿ Ë¿ Ë6¿ Ëx¿ Ë∂¿ Ë˘¿ È-¿ È7¿ È{¿ È≠¿ ÈÌ¿ Í¿ Í-¿ Ío¿ ÍÖ¿ Íª¿ Í≈¿ Í˜¿ Î¿ Î.¿ Îq¿ Îá¿ Î√¿ ÎÕ¿ Îˇ¿ Ï6¿ Ïv¿ Ï®¿ ÏÂ¿ Ì¿ Ì:¿ Ìg¿ Ìô¿ ÌØ¿ Ìÿ¿ Ó¿ Óp¿ ÓÄ¿ Óå¿ ÓÆ¿ ÓÎ¿ Ô¿ Ô¿ Ô)¿ Ô3¿ Ôs¿ Ô§¿ Ôÿ¿ Ô‚¿ Ô˘¿ .¿ 8¿ @¿ A¿ d¿ e¿ Ü¿ î¿ Œ¿ Ò¿ Ò>¿ Ò~¿ Ò≥¿ ÒÁ¿ Ú¿ Ú9¿ Úc¿ Úö¿ Ú‘¿ Úﬁ¿ ÚÌ¿ Û¿ Û¿ Û ¿ Û7¿ Û=¿ Û>¿ Û]¿ ÛÇ¿ ÛÜ¿ Ûá¿ Û¨¿ ÛÚ¿ Ù¿ ÙJ¿ ÙW¿ Ùu¿ ÙÅ¿ ÙÕ¿ Ù·¿ ı¿ ıQ¿ ıY¿ ı_¿ ıc¿ ıd¿ ı±¿ ˆ¿ ˆ¿ ˆ?¿ ˆW¿ ˆì¿ ˆΩ¿ ˆ√¿ ˆ«¿ ˆ…¿ ˆ ¿ ˜¿ ˜g¿ ˜Ñ¿ ˜±¿ ˜ı¿ ¯;¿ ¯M¿ ¯N¿ ¯ö¿ ¯Á¿ ¯˙¿ ˘¿ ˘¿ ˘e¿ ˘∂¿ ˘⁄¿ ˙ ¿ ˙¿ ˙M¿ ˙¿ ˙Ä¿ ˙å¿ ˙∑¿ ˙π¿ ˙∫¿ ˚	¿ ˚7¿ ˚o¿ ˚à¿ ˚â¿ ˚µ¿ ˚∂¿ ˚¬¿ ˚Â¿ ˚Á¿ ˚Ë¿ ¸0¿ ¸F¿ ¸j¿ ¸ì¿ ¸î¿ ¸‰¿ ¸˚¿ ˝¿ ˝¿ ˝=¿ ˝^¿ ˝_¿ ˝z¿ ˝ù¿ ˝û¿ ˝Œ¿ ˝Í¿ ˝Î¿ ˛9¿ ˛[¿ ˛\¿ ˛≠¿ ˛»¿ ˛…¿ ˛˚¿ ˇ¿ ˇ ¿ ˇ2¿ ˇc¿ ˇ}¿ ˇ¶¿ ˇ—¿ ˇ‰¿ ˇ˙¿ ¿ 1¿ c¿ d¿ ß¿ ¬¿ Ë¿¿ ¿@¿X¿v¿ç¿≠¿µ¿ ¿¿?¿~¿√¿¿&¿_¿~¿ø¿»¿…¿’¿¯¿¿%¿=¿W¿i¿~¿î¿≥¿º¿Ω¿…¿Ì¿¿7¿i¿ë¿¡¿ı¿¿C¿o¿´¿¨¿∏¿œ¿á¿â¿ä¿∆¿›¿¿¿¿F¿Q¿R¿ä¿ó¿ò¿€¿‰¿Â¿	¿	%¿	'¿	(¿	r¿	¿¿
¿
I¿
]¿
ö¿
π¿
œ¿
–¿¿+¿,¿_¿`¿l¿∏¿π¿≈¿¿¿¿3¿]¿{¿ù¿Õ¿œ¿–¿‡¿˜¿¿¿O¿m¿á¿ê¿ë¿∆¿«¿”¿¿¿¿?¿@¿L¿p¿ö¿¥¿“¿Í¿Ï¿Ì¿ ¿¿-¿C¿b¿w¿è¿ê¿€¿˝¿¿7¿k¿Ö¿©¿≤¿≥¿¬¿›¿ˆ¿¿2¿I¿e¿k¿l¿x¿è¿ ¿¿¿8¿9¿E¿i¿ì¿∞¿“¿¿¿@¿Z¿|¿~¿¿ì¿™¿«¿»¿¿g¿ê¿£¿‹¿Â¿Ê¿"¿#¿/¿a¿b¿n¿í¿º¿⁄¿ˆ¿¿¿¿^¿û¿Ï¿Û¿	¿:¿e¿f¿ù¿∑¿∏¿ÿ¿˙¿˚¿"¿C¿D¿a¿|¿}¿ƒ¿Û¿Ù¿¿I¿Å¿Ç¿≈¿¿W¿è¿°¿£¿§¿Á¿¿:¿h¿i¿ö¿ ¿À¿¸¿F¿G¿h¿Ñ¿°¿À¿—¿“¿!¿]¿õ¿ƒ¿ˇ¿¿
¿¿<¿V¿ü¿Ï¿¿ ¿m¿π¿‹¿ ¿ ¿ ]¿ ì¿ ”¿ ‘¿!¿!,¿!R¿!S¿!o¿!•¿!Œ¿"¿"1¿"7¿"8¿"}¿"´¿"›¿#%¿#`¿#ü¿#”¿#‹¿#ﬁ¿#ﬂ¿$¿$)¿$x¿$î¿$∏¿$π¿%¿%$¿%H¿%I¿%ï¿%π¿%Â¿%Ê¿&2¿&[¿&î¿&ï¿&∆¿&Ê¿&Á¿'6¿'I¿'x¿'y¿'£¿'»¿'…¿'Ê¿( ¿(Z¿(£¿(Ò¿)¿)@¿)m¿)s¿)t¿)ª¿)È¿*¿*U¿*Ö¿*π¿*Á¿+3¿+c¿+l¿+n¿+o¿+û¿+∆¿,¿,a¿,ä¿,ã¿,€¿-&¿-O¿-P¿-û¿-¨¿-–¿-—¿."¿.c¿.¥¿.ﬁ¿.ﬂ¿/.¿/k¿/ú¿/ù¿/Í¿0¿08¿09¿0É¿0•¿0⁄¿0€¿1¿1/¿1Y¿1í¿1º¿2¿27¿2b¿2ô¿2ü¿2†¿2Ÿ¿3¿3C¿3¿3≠¿3Î¿43¿4`¿4ë¿4ø¿4Ò¿4˙¿4¸¿4˝¿5#¿5]¿5ç¿5é¿5∂¿5ÿ¿5ı¿5˚¿5¸¿63¿6_¿6ß¿6Â¿6Ó¿6¿6Ò¿7¿79¿7:¿7Ö¿7Ü¿7Õ¿8¿8¿8 ¿8!¿8A¿8t¿8ß¿8®¿8‘¿9¿9¿9¿9?¿9n¿9§¿9ª¿9¡¿9¬¿:¿:Y¿:Ü¿:∑¿:”¿:‹¿:ﬁ¿:ﬂ¿;*¿;C¿;^¿;w¿;x¿;•¿;⁄¿;€¿<'¿<D¿<d¿<e¿<¥¿<„¿=¿=0¿=X¿=z¿=∏¿=æ¿=·¿>¿>¿>1¿>^¿>e¿>}¿>ì¿>≈¿>◊¿>ﬁ¿>‚¿>„¿?2¿?d¿?õ¿?ø¿?‚¿@¿@*¿@.¿@/¿@g¿@¥¿@µ¿@˛¿AD¿Aé¿AŒ¿B¿B¿BA¿Bk¿BÖ¿Bü¿B£¿B§¿BΩ¿Bﬂ¿BÙ¿C:¿C_¿CÑ¿C∂¿CÂ¿D¿D¿D!¿D9¿De¿D}¿DÖ¿Dâ¿Dä¿D°¿D¬¿D›¿DÛ¿E¿E¿E¿E¿EY¿Es¿E™¿EΩ¿Eæ¿F	¿F+¿F=¿F>¿F}¿F∞¿F±¿F‹¿F›¿G¿G"¿Gd¿Ge¿Gô¿G”¿H
¿HX¿H|¿H»¿I¿I¿I¿I¿IJ¿Ie¿Iî¿Iß¿I®¿I”¿I‰¿IÂ¿J¿J3¿J4¿Jq¿Jr¿Jõ¿J∏¿Jπ¿Jﬁ¿K¿K¿KZ¿Kß¿K©¿K™¿Kı¿LD¿LÉ¿L†¿L¥¿LÃ¿LÕ¿M¿Ma¿M±¿M÷¿M‹¿N,¿Nw¿N∆¿O¿O ¿O&¿Ow¿Oπ¿Oø¿P¿PW¿Pô¿Pü¿PÍ¿Q8¿QÖ¿Q≠¿Q“¿R¿R;¿Ru¿R±¿R’¿S¿S@¿S~¿Sã¿S—¿S◊¿S€¿S‹¿T¿T!¿T>¿TD¿TN¿TÉ¿Tç¿TÃ¿U¿U
¿U¿UL¿UR¿Uì¿Uô¿U£¿UÊ¿U¿Uˆ¿VA¿V|¿V¨¿V‘¿VË¿W.¿Wt¿Wx¿Wy¿Wù¿Wû¿WØ¿W·¿W˜¿X¿X"¿X#¿XT¿XU¿X{¿X|¿Xç¿X°¿X”¿XÁ¿XÎ¿XÏ¿Y¿Y¿Y9¿Y:¿YZ¿Y[¿Yg¿Yã¿Yå¿Yò¿Yº¿YÊ¿Z¿Z¿Z¿Z¿ZS¿Zã¿Z†¿Z∂¿Z∑¿ZË¿ZÈ¿Zı¿[¿[¿[*¿[]¿[^¿[j¿[ë¿[ì¿[î¿[·¿\¿\-¿\S¿\h¿\i¿\µ¿\‚¿\„¿]4¿]Ñ¿]ë¿]¡¿]¬¿]Ô¿^¿^,¿^:¿^]¿^°¿^‚¿^Ò¿^Ú¿^˛¿_0¿_P¿_q¿_¥¿_€¿_Ó¿`¿`U¿`Ä¿`º¿`¬¿`∆¿`«¿`˙¿a¿aX¿aï¿aØ¿aÃ¿aÍ¿b¿b&¿bC¿bb¿b¿bú¿bº¿b›¿b˛¿c!¿c*¿cK¿cb¿c≠¿c ¿c€¿d+¿d@¿dM¿dö¿d∑¿dÍ¿e9¿eu¿eï¿eø¿e‡¿f&¿f.¿fP¿fV¿fZ¿f[¿fò¿fÁ¿g¿g¿gL¿gW¿gY¿gZ¿gß¿g⁄¿gﬁ¿h,¿hC¿hÉ¿h≤¿h∂¿i¿i¿i#¿ir¿i≤¿iË¿j¿j¿j3¿jD¿jW¿jf¿jz¿jå¿jí¿jì¿jü¿j„¿jÙ¿k¿k<¿kN¿kv¿k¿kÅ¿kÇ¿k—¿k‡¿k‰¿l2¿lI¿lâ¿l∏¿lº¿m¿m\¿m§¿m®¿m˜¿n7¿nf¿nÅ¿n»¿o¿o¿o¿oV¿og¿oé¿oØ¿o¡¿o ¿oÃ¿oÕ¿p¿p+¿p/¿p}¿pî¿p‘¿q¿q¿qW¿qü¿q£¿qÚ¿r2¿r`¿rz¿r¡¿s¿s¿s¿sN¿s_¿sÜ¿sß¿sπ¿s¬¿sƒ¿s≈¿sÛ¿s˜¿t.¿td¿tp¿tú¿tù¿t©¿tÛ¿tÙ¿u¿u¿u<¿uh¿ui¿uu¿uö¿uÿ¿u⁄¿u€¿v*¿vv¿vƒ¿v‡¿v‰¿w1¿wQ¿wÜ¿w™¿wÀ¿wÔ¿w¿x<¿xã¿xŸ¿y¿yn¿yå¿y©¿y≈¿yÈ¿z	¿zF¿zn¿zo¿z{¿z≠¿zÕ¿z¿{¿{¿{¿{¿{*¿{Q¿{m¿{ç¿{¥¿{Ô¿|¿|B¿|Ñ¿|§¿|œ¿|¯¿}¿} ¿}@¿}Ñ¿}ª¿}‘¿}⁄¿~¿~¿~¿~F¿~z¿~ù¿~º¿~‡¿~˚¿ ¿J¿â¿≤¿…¿Â¿Ä¿ÄW¿Ä]¿Äa¿Äb¿Äò¿Ä⁄¿Å¿Å'¿ÅB¿Åg¿Åë¿Å–¿Å˘¿Ç¿Ç,¿Ç`¿Çû¿Ç§¿Ç®¿Ç©¿Ç€¿É¿É=¿Éa¿Éì¿ÉÆ¿É”¿É˜¿Ñ¿Ñ%¿Ñd¿Ñç¿Ñ§¿Ñ¿¿Ö¿ÖL¿ÖR¿ÖV¿ÖW¿Öì¿Ö€¿Ü	¿Ü;¿ÜV¿Ü{¿Üü¿Ü≈¿ÜÕ¿á¿á5¿áL¿áh¿á∂¿áÙ¿á˙¿á˛¿áˇ¿àJ¿àÑ¿àØ¿àÕ¿à˛¿â¿â>¿â¿â™¿â¡¿â‚¿ä¿äC¿äI¿äM¿äN¿äû¿ä∏¿äÔ¿ã¿ã@¿ã[¿ãÄ¿ã¡¿ãÏ¿å¿å$¿åA¿å¿åÖ¿åâ¿åä¿å’¿ç¿çQ¿çê¿ç∑¿ç“¿ç˜¿é1¿éU¿él¿éñ¿é∏¿éˆ¿é¸¿è ¿è¿è.¿èM¿èn¿èÑ¿èü¿è∫¿èﬂ¿ê ¿êK¿êb¿ê¿êú¿ê⁄¿ê‡¿ê‰¿êÂ¿ë	¿ë.¿ë/¿ëh¿ëi¿ëu¿ë†¿ë”¿ë‘¿ë‡¿í¿í¿íA¿íc¿í¥¿íﬁ¿ì¿ì	¿ì&¿ìU¿ìÑ¿ìä¿ìû¿ì¢¿ì£¿ìØ¿ìı¿î¿îJ¿îx¿î§¿î¶¿îß¿îÒ¿ï¿ïH¿ïf¿ï¿ïñ¿ïó¿ïÂ¿ñ4¿ñJ¿ñb¿ñ{¿ñã¿ñô¿ñ™¿ñ¬¿ñÓ¿ñÔ¿ñ˚¿ó-¿óM¿óm¿óq¿ór¿ó~¿óø¿óŒ¿ò¿ò¿ò,¿ò=¿ò?¿ò@¿òê¿òﬂ¿ô#¿ôR¿ôg¿ôz¿ô{¿ôí¿ô´¿ôƒ¿ô‘¿ô’¿ô·¿ö¿ö3¿öS¿öW¿öX¿öd¿öå¿öç¿öô¿öƒ¿õ¿õ¿õ¿õ`¿õa¿õm¿õ≠¿õÊ¿õË¿õÈ¿ú#¿úW¿úX¿úß¿úÚ¿ù ¿ù>¿ùK¿ùÅ¿ùÇ¿ùé¿ù¿¿ù‡¿ùÚ¿û¿ûi¿ûä¿ûó¿û¬¿û˘¿ûˇ¿ü¿ü¿üT¿ü•¿üÙ¿†B¿†x¿†∑¿†∏¿†ƒ¿°¿°G¿°I¿°J¿°ê¿°û¿°∫¿¢¿¢S¿¢§¿¢÷¿¢˚¿¢¸¿£H¿£w¿£í¿£ì¿£‰¿§0¿§?¿§[¿§\¿§´¿§∫¿§œ¿§–¿§Ú¿•¿•¿•B¿•d¿•e¿•}¿••¿•≈¿•Ê¿¶ ¿¶¿¶9¿¶?¿¶A¿¶B¿¶ì¿¶„¿ß¿ß¿ßT¿ß}¿ßé¿ß¥¿ß‘¿ßÈ¿®¿®[¿®x¿®y¿®«¿©¿©S¿©Y¿©™¿©Ï¿™¿™¿™(¿™=¿™N¿™b¿™∞¿™ ¿™◊¿™€¿™‹¿™˚¿´'¿´q¿´u¿´v¿´¬¿´ˆ¿¨%¿¨G¿¨ï¿¨ô¿¨ö¿¨Ë¿≠¿≠f¿≠g¿≠≥¿≠⁄¿≠˛¿Æ¿Æa¿Æg¿Æ}¿Æ©¿ÆÕ¿ÆÌ¿ÆÛ¿Ø¿Ø<¿Ø[¿Øa¿Øt¿Øõ¿Øü¿Ø†¿Ø◊¿∞$¿∞I¿∞[¿∞ú¿∞ø¿∞ ¿∞À¿∞˘¿±'¿±(¿±w¿±«¿≤¿≤`¿≤Æ¿≤Ø¿≤ﬁ¿≥ ¿≥¿≥L¿≥Y¿≥t¿≥z¿≥~¿≥¿≥–¿¥¿¥¿¥b¿¥Ç¿¥”¿µ ¿µS¿µü¿µÎ¿∂¿∂B¿∂[¿∂á¿∂Ω¿∂æ¿∂‚¿∑(¿∑)¿∑s¿∑Ω¿∑Ì¿∏¿∏-¿∏q¿∏w¿∏≤¿∏ı¿π¿πH¿πa¿πß¿πÂ¿∫6¿∫^¿∫ñ¿∫º¿∫Ë¿ª&¿ª[¿ªx¿ª™¿ª›¿º¿ºH¿ºP¿ºV¿ºW¿ºj¿ºú¿ºº¿ºÙ¿Ω¿Ω"¿Ω6¿Ωi¿Ωì¿Ω©¿Ωœ¿ΩÌ¿æ¿æB¿æn¿æÉ¿æ¨¿æ ¿æ˜¿ø¿øK¿ø`¿øö¿ø—¿ø¯¿¿'¿¿r¿¿ã¿¿‘¿¡¿¡A¿¡R¿¡Ä¿¡ä¿¡í¿¡„¿¬¿¬W¿¬¶¿¬¬¿¬‹¿√¿√B¿√e¿√~¿√©¿√ ¿√Á¿√¯¿ƒI¿ƒñ¿ƒÂ¿ƒÔ¿≈¿≈L¿≈v¿≈∑¿≈“¿∆ ¿∆1¿∆~¿∆∞¿∆‹¿«)¿«Z¿«á¿«–¿«˝¿»¿»¿»C¿»Ç¿»ø¿»ÿ¿…#¿…<¿…]¿…ì¿…ü¿…ß¿…ƒ¿…ˇ¿ -¿ P¿ v¿ ß¿ ı¿ ˆ¿À2¿À^¿Àä¿À¬¿ÀË¿Ã¿ÃJ¿Ãj¿Ã¥¿Ã¿¿Ã¿Õ1¿ÕY¿Õñ¿Õ±¿Õ‘¿Œ¿Œ¿ŒN¿Œu¿Œ§¿Œ√¿Œœ¿Œ◊¿ŒÒ¿œ¿œ0¿œ8¿œo¿œ°¿œÕ¿œ◊¿œﬂ¿–¿–>¿–X¿–t¿–Æ¿–‹¿–ˆ¿—¿—>¿—_¿—g¿—Ä¿—®¿—◊¿“¿“'¿“/¿“K¿“h¿“}¿“Å¿“Ç¿“é¿“‘¿” ¿”"¿”U¿”w¿”ù¿”ÿ¿‘¿‘,¿‘^¿‘¢¿‘´¿‘±¿‘ˆ¿’¿’-¿’y¿’ü¿’∑¿’€¿÷ ¿÷%¿÷-¿÷y¿÷Å¿÷∂¿◊¿◊,¿◊F¿◊l¿◊ì¿◊Æ¿◊∏¿◊¬¿◊Ÿ¿◊·¿◊Â¿◊Á¿◊Ë¿ÿ7¿ÿÖ¿ÿ—¿Ÿ!¿Ÿp¿Ÿé¿ŸØ¿Ÿˇ¿⁄J¿⁄ô¿⁄≤¿⁄–¿⁄È¿€¿€,¿€I¿€`¿€f¿€h¿€i¿€õ¿€æ¿€‰¿€¯¿€˘¿‹¿‹/¿‹0¿‹`¿‹ó¿‹ò¿‹Ã¿‹Õ¿‹Ú¿›1¿›2¿›j¿›ö¿›º¿› ¿›–¿›Û¿›˜¿›¯¿ﬁ:¿ﬁq¿ﬁì¿ﬁ°¿ﬁß¿ﬁ‚¿ﬁÊ¿ﬁË¿ﬁÈ¿ﬂ4¿ﬂ[¿ﬂé¿ﬂè¿ﬂ—¿‡¿‡_¿‡x¿‡√¿‡ƒ¿‡Í¿‡Î¿·¿·1¿·;¿·R¿·ú¿·¬¿·ÿ¿·ı¿‚#¿‚$¿‚L¿‚ê¿‚∂¿‚ƒ¿‚ ¿‚À¿‚Ë¿„1¿„2¿„c¿„∞¿„∂¿„∑¿„¯¿‰ ¿‰B¿‰à¿‰∞¿‰Î¿Â
¿ÂH¿Âq¿Â~¿Â…¿ÂÚ¿Â¯¿Â˘¿Ê"¿ÊS¿Êv¿Ê¢¿Êﬂ¿ÊÛ¿Á¿Á¿Á¿ÁI¿Áf¿Án¿Áo¿Áã¿Áå¿Á∞¿Á¥¿Áµ¿Á«¿Á…¿Á ¿Ë¿Ë5¿ËB¿Ëb¿Ëw¿Ë|¿Ë¨¿Ë¬¿È¿ÈK¿Èm¿È¿Èâ¿È∫¿È–¿Í¿Ís¿Í∫¿Í÷¿Î&¿Îh¿Î¢¿Î”¿Ï¿Ï¿Ï¿ÏD¿Ïy¿Ïù¿ÏÂ¿Ï¸¿Ì7¿ÌA¿ÌÄ¿ÌÅ¿Ìò¿ÌÈ¿Ó.¿Ó¿Ó…¿Ô¿ÔM¿Ôå¿Ô¥¿Ô˚¿9¿_¿o¿°¿À¿Ù¿Ò;¿ÒP¿Ò¢¿Ò„¿Ò˙¿Ú<¿Ú\¿Ú¢¿Ú ¿Û¿Û¿Û1¿ÛW¿Ûc¿Ûm¿Ûû¿Û≠¿Û‹¿Ûˆ¿Ù6¿Ùh¿ÙÉ¿Ù™¿Ù‘¿Ùﬁ¿ÙÊ¿ı¿ı2¿ıK¿ıÑ¿ı¶¿ıœ¿ı˚¿ˆ<¿ˆY¿ˆü¿ˆ ¿ˆ·¿ˆ˝¿˜¿˜B¿˜^¿˜Ä¿˜ù¿˜™¿˜µ¿˜–¿˜˝¿¯-¿¯k¿¯ò¿¯§¿¯∞¿¯Ÿ¿˘¿˘¿˘@¿˘\¿˘Ö¿˘è¿˘∏¿˘Ì¿˘˜¿˙¿˙1¿˙L¿˙T¿˙Z¿˙^¿˙_¿˙q¿˙s¿˙t¿˙û¿˙Ô¿˙¿˚'¿˚o¿˚É¿˚°¿˚Ï¿¸6¿¸O¿¸P¿¸°¿¸Ô¿˝?¿˝~¿˝£¿˝§¿˝Ì¿˛¿˛8¿˛9¿˛t¿˛ú¿˛ù¿˛∏¿˛»¿˛ ¿˛À¿ˇ¿ˇO¿ˇÄ¿ˇò¿ˇ§¿ˇø¿ˇ¿¿ ¿ 	¿ ¿ ;¿ ¿ §¿ ¬¿ Ë¿ È¿¿6¿i¿î¿º¿ﬁ¿‚¿„¿Ô¿¿B¿q¿í¿Ø¿∑¿Ω¿ˇ¿>¿e¿ß¿◊¿›¿·¿‚¿Ó¿¿6¿Q¿ò¿∆¿Ú¿!¿@¿]¿e¿k¿o¿p¿|¿ç¿¢¿¶¿®¿©¿ˆ¿¿¿b¿î¿ï¿‰¿¿K¿å¿ß¿∂¿›¿ﬁ¿˝¿C¿D¿Y¿q¿∞¿√¿	¿	¿	¿	*¿	O¿	{¿	Ø¿	–¿	Ó¿
¿
.¿
[¿
w¿
ö¿
¢¿
¶¿
ß¿
÷¿¿C¿U¿V¿b¿£¿ø¿¿¿Ã¿¿-¿g¿Ü¿∆¿ ¿À¿◊¿¿+¿/¿0¿<¿x¿î¿ò¿ô¿•¿Ì¿¿¿¿¿c¿Ç¿Ü¿á¿ì¿ÿ¿˜¿˚¿¸¿¿9¿f¿ã¿è¿ê¿ú¿Í¿¿¿¿¿N¿{¿†¿§¿•¿±¿‰¿¿8¿<¿=¿I¿Ä¿∞¿ÿ¿‹¿›¿È¿:¿]¿a¿b¿n¿®¿◊¿!¿_¿c¿d¿p¿∑¿Û¿9¿X¿£¿ß¿®¿¥¿˜¿-¿[¿_¿`¿l¿•¿ÿ¿˛¿¿8¿<¿=¿I¿ê¿»¿¯¿(¿,¿-¿9¿{¿ô¿ù¿û¿™¿Î¿ ¿M¿Q¿R¿^¿£¿⁄¿	¿¿¿¿Q¿Å¿©¿≠¿Æ¿∫¿˘¿-¿Y¿]¿^¿j¿°¿Õ¿¿O¿S¿T¿`¿´¿Â¿¿¿¿(¿w¿≥¿Â¿¿4¿O¿b¿k¿r¿v¿w¿É¿ ¿¿2¿6¿8¿9¿Ö¿ë¿¨¿»¿‹¿›¿"¿$¿%¿;¿q¿•¿¶¿∏¿Î¿ ¿ J¿ ô¿ ∆¿!¿!R¿!è¿!ê¿!π¿!˝¿!˛¿""¿"J¿"g¿"m¿"q¿"s¿"t¿"ø¿#¿#Q¿#U¿#ü¿#Í¿$.¿$K¿$c¿$ú¿$ù¿$Æ¿$Ø¿$Û¿%¿%4¿%J¿%N¿%O¿%â¿%…¿% ¿&¿&g¿&¥¿'¿'4¿'5¿'d¿'†¿'°¿'“¿'”¿'Á¿'Ë¿(¿(M¿(o¿(Ç¿(¿¿)¿)¿)¿)¿)6¿)8¿)9¿)e¿)ê¿)ë¿)√¿)Ì¿)Ó¿*;¿*d¿*∞¿*Í¿*Î¿*˜¿+(¿+)¿+L¿+É¿+Ñ¿+ª¿+ˇ¿, ¿,3¿,k¿,ì¿,¶¿,Û¿-C¿-I¿-M¿-N¿-Z¿-ü¿-π¿-Ÿ¿-‚¿-‰¿-Â¿.¿.5¿.R¿.S¿.®¿.ª¿.º¿.Ì¿/¿/¿/>¿/]¿/^¿/ê¿/∞¿/‚¿/„¿/˛¿0¿08¿0Z¿0|¿0ü¿0π¿0”¿0Ô¿0Û¿0Ù¿1¿1I¿1J¿1à¿1¿¿1¡¿1¿2¿28¿2S¿2ñ¿2„¿2È¿2Ì¿2Ó¿3¿3X¿3ä¿3’¿3Ÿ¿3⁄¿4¿4L¿4j¿4Ç¿4†¿4–¿5 ¿52¿5N¿5W¿5Y¿5Z¿5ç¿5∞¿5È¿6¿6¿6?¿6[¿6\¿6à¿6≤¿6≥¿6“¿6Ò¿7¿7)¿7/¿70¿7a¿7ü¿7Ω¿7‚¿7Ë¿7Ï¿7Ì¿8¿8k¿8ç¿8∑¿8·¿8˛¿9 ¿9h¿9¿9à¿9ä¿9ã¿9”¿:¿:P¿:ï¿:ƒ¿:≈¿:—¿:˚¿:¸¿;¿;G¿;l¿;ò¿;À¿;Ÿ¿;ﬂ¿<¿<S¿<r¿<¬¿<˘¿<˝¿<˛¿=,¿=c¿=Ü¿=á¿=ì¿=—¿=Î¿>*¿>D¿>M¿>O¿>P¿>Ñ¿>…¿?¿?¿?W¿?é¿?¡¿?Ì¿?Ô¿?¿@0¿@N¿@¿@´¿@¨¿@Ë¿A¿A¿AF¿Ac¿Ad¿A∞¿A≤¿A≥¿A·¿B¿B>¿BF¿BG¿Bó¿B“¿B·¿B„¿B‰¿C"¿CN¿Cz¿Cì¿C”¿C¿D/¿Dw¿Dè¿D»¿DŒ¿DÚ¿E=¿EC¿EG¿En¿Eã¿Eù¿Eü¿E†¿E‘¿EÛ¿F¿F0¿F4¿FE¿FG   @_uuid_pluginPlatformCache_pluginPlatformAudioPlayerPlayerExceptionPlayerInterruptedExceptionPlaybackEventProcessingStatePlayerStateIcyInfo
IcyHeadersIcyMetadataSequenceStateAudioLoadConfigurationDarwinLoadControlAndroidLoadControlAndroidLivePlaybackSpeedControlProgressiveAudioSourceOptionsDarwinAssetOptionsAndroidExtractorOptions_ProxyHttpServer_HttpRangeRequest_HttpRangeResponseAudioSourceIndexedAudioSourceUriAudioSourceProgressiveAudioSourceDashAudioSourceHlsAudioSourceSilenceAudioSourceConcatenatingAudioSourceClippingAudioSourceLoopingAudioSource_encodeDataUrlStreamAudioSourceStreamAudioResponseLockCachingAudioSource_InProgressCacheResponse_StreamingByteRangeRequest_proxyHandlerForSource_proxyHandlerForUri_getCacheDirShuffleOrderDefaultShuffleOrderLoopModeWebCrossOrigin_IdleAudioPlayer_InitialSeekValuesAudioPipelineAudioEffectAndroidAudioEffectDarwinAudioEffectAndroidLoudnessEnhancerAndroidEqualizerBandAndroidEqualizerParametersAndroidEqualizer
_isAndroid	_isDarwin_isUnitTest_ValueStreamExtensionPositionDiscontinuityPositionDiscontinuityReason_getUrl_createHttpClient  õ